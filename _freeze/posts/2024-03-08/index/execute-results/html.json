{
  "hash": "c95e2b9b435e46c58babfb6e22a8c2f1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"What's the best notebook\"\ndescription: \"Why I started this blog?\"\n#image: \"feature.gif\"\ncomments:\n  giscus:\n    repo: \"adam-coates/adam-coates.github.io\"\n    mapping: \"title\"\ndate: 2024-03-04\ncategories: [\"coding\", \"neovim\", \"quarto\"] # self-defined categories\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready\ncss: style.css\n---\n\n\n### What are quarto documents and jupyter notebooks?\n\nQuarto documents are a way to preview raw html of jupyter notebooks. But so much more. \n\nJupyter notebooks (I used for quite some time) are a way to have in-line code, split into cells that can be rendered one cell at a time. Typically jupyter notebooks are used with python and some text written in markdown. Despite this I find jupyter notebooks and its sister program jupyter labs to be great if you want to get started and learn python. Beyond this, jupyter lab offers a useful gui that aids almost any data scientist (or anyone who wishes to write python code for that matter) to process data in a more interactive way than just writing python code in the terminal. For example: \n\n![](./cmd_eg.png){fig-align=\"center\" width=\"75%\"}\n\nHere I show my first (slightly laughable) attempt at importing matplotlib. Of course, on my windows machine I didn't have it. So I thought this was a great example of how terminal based coding really goes like. \n\nThere is not much to see only really the raw code entered line-by-line. Whereas in a jupyter notebook that line plot can be created much more easily, with in-built syntax highlighting and code suggestions, it means that your less likely to find yourself in a situation as I found myself in above. (where you *really* don't have a library or package installed before trying to import it!) \n\n![](./jupyter_eg.png){fig-align=\"center\" width=\"70%\"}\n\nHere above I show that those 6 or so lines can be executed in a 'cell' whereby the whole block of code can be run instead of typing the code line by line. \n\nThe above is great and it just works. I'm not going to bash jupyter lab or jupyter notebooks, you can find many videos online of people doing that; it's also true and likely that I will still use them. \n\nBut I feel I have a workflow that works better and works well especially for me. If you're like me and want to customise a coding editor to make it what your use case is, then keep reading. \n\n### Neovim and the configuration\n\nPerhaps I started this whole rabbit-hole journey around 4th October 2023 with the first commit: <a href=\"https://github.com/adam-coates/dotfiles/commits/main/?since=2023-10-04&until=2023-10-04\" class=\"button\">97ca162</a>. But since then my whole configuration has changed rapidly and of course I have moved away from jupyter notebooks to quarto documents. I have also moved away from editing quarto documents in Rstudio and now solely edit files using neovim which looks like this: \n\n![](./nvim_eg.png)\n\nMy configuration allows for multiple things. Snippe\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}