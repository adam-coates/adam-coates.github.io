{
  "hash": "958f15a92e70b1e8b4a21aa38b31249b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Simple plotting in r and python\"\ndescription: \"I show simple basic plotting methods using ggplot2 and matplotlib\"\n#image: \"preview.png\"\ncomments:\n  giscus:\n    repo: \"adam-coates/adam-coates.github.io\"\n    mapping: \"title\"\ndate: \"2024-03-12\"\ncategories: [\"R\", \"python\"]\ndraft: false #  setting this to  will prevent your post from appearing on your listing page until you're ready\n#css: style.css\n---\n\n\n### It's time to move away from matlab entirely \n\nWhile MATLAB served me well for a number of years I feel now is the time to completely stop using it all together (except for exceptional use cases, for example [Psychtoolbox](http://psychtoolbox.org), but even then I'm much more inclined to use the open source MATLAB version [Octave](https://octave.org)).\n\n[MATLAB](https://www.mathworks.com/products/matlab/matlab-vs-python.html) themselves even write about the differences between MATLAB and Python and which one you should use. It's true MATLAB's documentation on functions and packages is really extensive, easily understandable and takes the lead over Python and R. But this is just because MATLAB is a private company and the subscriptions aren't exactly cheap. For MATLAB they argue that you pay for more than just the GUI and software but also this user support (although I've never ever picked up the phone and called MATLAB directly with a problem I've had). \n\nStill Python has, in recent years, closed the gap between computational speed of large matrices and with an ever increasing user base, has gained a lot of very useful packages and modules. \n\nEven R is/ (arguably has) already closed this gap too. And with Rstudios nicely laid out default GUI there is really no excuse even for beginners not to use it. \n\nMATLAB will always be used in certain fields though because it really just works well, not to mention how easy it is to use (again though the extensive and well-documented functions are partly the reason for this). \n\n**But R and Python are open source and FREE!** Anyone can use them.\n\n### I want to make plots using in an open source way, how?\n\nThis blog post won't give a full tutorial, just check out a YouTube video for that, theres really loads! Or even ask chatgpt to do it for you, since it seems to do well at basic coding anyway. \n\nWith a fully configured neovim setup (like the one I have) it makes coding easier and much faster to do. This is an additional reason to move away from MATLAB since you almost have to do everything inside of MATLABs gui. \n\n### Bar plots\n\nHere's an example bar plot plot in R using `ggplot`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nx <- runif(5, min = 1, max = 10)\nfruits <- c(\"Apples\", \"Bananas\", \"Oranges\", \"Grapes\", \"Pears\")\n\nfruit_data <- data.frame(fruit = fruits, quantity = x)\n\nggplot(fruit_data, aes(x = fruit, y = quantity)) + \n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  labs(x = \"Fruit\", y = \"Quantity\", title = \"Amount of Fruit\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n> In MATLAB creating the same plot would take quite a few extra lines of code for sure.\n\n---\n\nHere's an example bar plot in python using `plt.bar`: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Generate random data\nnp.random.seed(0)\nx = np.random.uniform(1, 10, 5)\nfruits = [\"Apples\", \"Bananas\", \"Oranges\", \"Grapes\", \"Pears\"]\n\n# Create a DataFrame\nfruit_data = pd.DataFrame({\"fruit\": fruits, \"quantity\": x})\n\n# Create the bar plot\nplt.bar(fruit_data['fruit'], fruit_data['quantity'], color='skyblue')\nplt.xlabel('Fruit')\nplt.ylabel('Quantity')\nplt.title('Amount of Fruit')\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=672}\n:::\n:::\n\n---\n\n### Scatter plots\n\n\nHere's some examples of scatter plots using python:\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nnp.random.seed(0)\nx = np.random.uniform(1, 10, 5)\nfruits = [\"Apples\", \"Bananas\", \"Oranges\", \"Grapes\", \"Pears\"]\n\n# Create scatter plot\nplt.figure(figsize=(8, 5))\nplt.scatter(fruits, x, color='skyblue', s=100, edgecolor='black', alpha=0.7)\n\n# Add labels and title\nplt.xlabel('Fruit')\nplt.ylabel('Quantity')\nplt.title('Amount of Fruit')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n([0, 1, 2, 3, 4], [Text(0, 0, 'Apples'), Text(1, 0, 'Bananas'), Text(2, 0, 'Oranges'), Text(3, 0, 'Grapes'), Text(4, 0, 'Pears')])\n```\n\n\n:::\n\n```{.python .cell-code}\n# Display the plot\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-3.png){fig-align='center' width=768}\n:::\n:::\n\nHere's a scatter plot in python showing the line of best fit by just plotting `y = mx + b`:\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate random data\nnp.random.seed(0)\nx = np.random.rand(20)\ny = np.random.rand(20)\n\n# Calculate the line of best fit\nm, b = np.polyfit(x, y, 1)\n\n# Calculate correlation\ncorrelation = np.corrcoef(x, y)[0, 1]\n\n# Create scatter plot\nplt.figure(figsize=(8, 5))\nplt.scatter(x, y, color='skyblue', label='Data Points')\n\n# Plot the line of best fit\nplt.plot(x, m*x + b, color='red', label='Line of Best Fit')\n\n# Add labels and title\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Scatter Plot with Line of Best Fit')\n\n# Add legend\nplt.legend()\n\n# Calculate and print correlation\nprint('Correlation coefficient:', correlation)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCorrelation coefficient: 0.37157153754458777\n```\n\n\n:::\n\n```{.python .cell-code}\n# Display the plot\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-5.png){fig-align='center' width=768}\n:::\n:::\n---\n\n\nHere's the exact same scatter plots but in R instead using `geom_point`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n# Sample data\nset.seed(0)\nx <- runif(5, min = 1, max = 10)\nfruits <- c(\"Apples\", \"Bananas\", \"Oranges\", \"Grapes\", \"Pears\")\n\n# Create data frame\nfruit_data <- data.frame(fruit = fruits, quantity = x)\n\n# Create scatter plot\nscatter_plot <- ggplot(fruit_data, aes(x = fruit, y = quantity)) +\n  geom_point(color = \"skyblue\", size = 5, shape = 19, alpha = 0.7) +\n  labs(x = \"Fruit\", y = \"Quantity\", title = \"Amount of Fruit\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels\n\n# Display the plot\nprint(scatter_plot)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-7.png){fig-align='center' width=672}\n:::\n:::\n\nHere's a scatter plot in R using `geom_smooth` to fit a line of best fit:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load libraries\nlibrary(ggplot2)\n\n# Set seed for reproducibility\nset.seed(0)\n\n# Generate random data\nx <- runif(20)\ny <- runif(20)\n\n# Create data frame\ndata <- data.frame(x = x, y = y)\n\n# Create scatter plot\nscatter_plot <- ggplot(data, aes(x = x, y = y)) +\n  geom_point(color = \"skyblue\") +\n  labs(x = \"X\", y = \"Y\", title = \"Scatter Plot with Line of Best Fit\")\n\n# Add line of best fit\nscatter_plot <- scatter_plot + geom_smooth(method = \"lm\", se = FALSE, color = \"red\")\n\n# Calculate correlation coefficient\ncorrelation <- cor(x, y)\n\n# Print correlation coefficient\ncat(\"Correlation coefficient:\", correlation, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCorrelation coefficient: -0.1527954 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Display plot\nprint(scatter_plot)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n---\n\n\nThis is all there is to it. So the main trick here is to get the data in a format that can be read correctly. The sure fire way is to make sure the data provided to the plots is as a type array. But of course its possible to to index for example a pandas dataframe as an array. \n\n### what about error bars?\n\nError bars a crucial in any plot and really tell the more about what the plot means. *In any scientific work no error bars is just a no go.*\n\nHere I show a scatter plot in R with shading using `geom_smooth` just by setting `se = TRUE`:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load library\nlibrary(ggplot2)\n\n# Set seed for reproducibility\nset.seed(0)\n\n# Generate random data\nx <- runif(20)\ny <- runif(20)\n\n# Create data frame\ndata <- data.frame(x = x, y = y)\n\n# Calculate standard deviation of y\nstd_dev_y <- sd(y)\n\n# Create scatter plot\nscatter_plot <- ggplot(data, aes(x = x, y = y)) +\n  geom_point(color = \"skyblue\") +\n  labs(x = \"X\", y = \"Y\", title = \"Scatter Plot with Line of Best Fit\")\n\n# Add line of best fit with shading for standard deviation\nscatter_plot <- scatter_plot + \n  geom_smooth(method = \"lm\", se = TRUE, fill = \"skyblue\", color = \"red\") +\n  annotate(\"text\", x = max(data$x), y = max(data$y), \n           label = paste(\"Standard Deviation of Y:\", round(std_dev_y, 2)), \n           hjust = 1, vjust = 1)\n\n# Calculate correlation coefficient\ncorrelation <- cor(x, y)\n\n# Print correlation coefficient\ncat(\"Correlation coefficient:\", correlation, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCorrelation coefficient: -0.1527954 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Display plot\nprint(scatter_plot)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=672}\n:::\n:::\n\n---\n\nAnd here's a bar plot in python with error bars by setting `yerr`:\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nfruits = [\"Apples\", \"Bananas\", \"Oranges\", \"Grapes\", \"Pears\"]\nquantities = np.random.randint(5, 20, size=5)\nerrors = np.random.randint(5,10,size=5) / 2\n\n# Create the bar plot\nplt.bar(fruits, quantities, color='skyblue', yerr=np.abs(errors), capsize=5)\n\n# Add labels and title\nplt.xlabel('Fruit')\nplt.ylabel('Quantity')\nplt.title('Amount of Fruit with Error Bars')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n([0, 1, 2, 3, 4], [Text(0, 0, 'Apples'), Text(1, 0, 'Bananas'), Text(2, 0, 'Oranges'), Text(3, 0, 'Grapes'), Text(4, 0, 'Pears')])\n```\n\n\n:::\n\n```{.python .cell-code}\n# Display the plot\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=672}\n:::\n:::\n\n### Plotting is easy\n\nI hope the examples above convinced you that plotting in R or python is very easy. Not to mention that the plots look visually better without much tinkering (unlike in MATLAB). These are just some examples and I have made these isolated on purpose such that you can really just copy any block and alter it to your needs. \n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}