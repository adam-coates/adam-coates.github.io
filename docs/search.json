[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Adam Coates",
    "section": "",
    "text": "About\n\nHello, I‚Äôm Adam a PhD student in Cognitive Psychology at the University of Graz, Austria.\nI am currently interested in the function of the human claustrum and aim to uncover the claustrum‚Äôs function in humans using functional magnetic resonance imaging.\n\n\n:::"
  },
  {
    "objectID": "posts/2024-03-10/index.html",
    "href": "posts/2024-03-10/index.html",
    "title": "The script that makes the website",
    "section": "",
    "text": "Blogging is hard\nWithout helpful scripts writing a blog can be hard to do. There is a lot of things to remember!\n\nThe structure of a yaml header\nHow to save the document\nHow to properly render in-line code\nThe command needed to render the quarto markdown to html (its true, this blog is written using quarto)\nThe usual git commit and push commands (the website is all open source on github)\n‚Ä¶ and many other things I care not to remember\noh wait even remembering to write a blog post can be hard!\n\nSo, I‚Äôve made it easier for myself. I recently wrote a bash script that does everything I need to get started writing a blog post.\nThe whole blog is structured around quarto markdown format and so this alone makes life much easier to do.\n\n\nThe script\nLets start at the top of the script and work our way down. First I define 6 variables these are mainly colours (Yes I‚Äôm one of those people that like colour in the bash scriptüòÇ for me its easier to show yes (in green) and no (in red) that way it‚Äôs a subconscious thing. If I see something written in red I might be entering the danger zone).\nAlso here I create a variable to where the blog is stored locally and the GitHub address of where this repo is.\nFinally, at the bottom I made a function to get user input for:\n\nThe title of the blog\n\nThe description of the blog\n\n\n\ncode part 1\n\nrepo=\"https://github.com/adam-coates/adam-coates.github.io\"\nblogdir=~/adam-coates.github.io/posts\ngreen='\\e[32m'\nred='\\e[31m'\npurple='\\033[0;35m'\nclear='\\e[0m'\n\nColorGreen(){\n    echo -ne $green$1$clear\n}\n\nColorRed(){\n    echo -ne $red$1$clear\n}\n\nColorPurple(){\n    echo -ne $purple$1$clear\n}\n\nget_info() {\n    read -p \"Enter a title: \" title\n\n    read -p \"Enter a description: \" description\n}\n\n\nNext I created a function that I use often if I know a piece of code involves doing x for a certain amount of time without any output I like to have a visual ‚Äòspinner‚Äô output on the screen that shows me that a process is working.\nThis will be clear later on in the code.\nThis spinner works by getting the process ID otherwise known as PID of a process and outputs these characters ‚£æ,‚£Ω,‚£ª,‚¢ø,‚°ø,‚£ü,‚£Ø,‚£∑. The hardest part is actually how to display these characters to replace the character before it. Otherwise the bash output might look a bit something like this:\n\n\n\n\n\nSo after a character is printed out, there is a special unicode character that actually moves the cursor back one place on the screen (almost acting like a backspace). This deletes the current visible character and places the new one in its place.\n\n\ncode part 1.1\n\nfunction spinner() {\n    # Spinner characters\n    local spin='‚£æ‚£Ω‚£ª‚¢ø‚°ø‚£ü‚£Ø‚£∑'\n    local charwidth=3\n\n    # Make sure we use non-unicode character type locale \n    # (that way it works for any locale as long as the font supports the characters)\n    local LC_CTYPE=C\n\n    # Run the command passed as arguments and capture its PID\n    \"$@\" &\n    local pid=$!\n\n    local i=0\n    tput civis # Cursor invisible\n    while kill -0 $pid 2&gt;/dev/null; do\n        local i=$(((i + $charwidth) % ${#spin}))\n        printf \"\\e[32m%s\\e[m\" \"${spin:$i:$charwidth}\"  # Green font color\n        printf \"\\033[1D\"  # Move the cursor back one position\n        sleep .1\n    done\n    tput cnorm # Cursor visible\n    wait $pid # Capture exit code\n    return $?\n}\n\n\n\n\nQuarto template\nNext I created a function to actually generate a template of the quarto markdown document needed to write a blog post such as this one you‚Äôre reading right now.\nI start by getting helpful info. Todays date and date and time. I then make a new directory in the blog local directory and then create the ‚Äò.qmd‚Äô document called index.\nNext comes the boilerplate yaml header for every blog post. The title, description, (if I want github comments enabled at the bottom of the post), date, categories and any other additional .css that I might need.\nThere is a whole myriad of yaml header options that are described on the quarto website. But for a basic, get-going, blog the yaml below is all I need.\nFinally I open the newly made document, in my favourite text editor neovim.\n\n\ncode part 1.2\n\ncreate_file() {\n    date=$(date +\"%Y-%m-%d\")\n    timestamp=\"$(date +\"%Y-%m-%d-%H:%m\")\"\n    localdir=\"$blogdir/$date/\"\n    mkdir \"$localdir\"\n    # Cd into the directory\n    cd \"$localdir\" || exit\n    # Create the file in the specified directory\n    touch \"$localdir/index.qmd\"\n\n\n    # Format the title by removing dashes\n    title=\"${title//-/ }\"\n\n    # set up the yaml frontmatter\n    echo \"---\" &gt;&gt;\"$localdir/index.qmd\"\n    echo \"title: \\\"$title\\\"\" &gt;&gt;\"$localdir/index.qmd\"\n    echo \"description: \\\"$description\\\"\" &gt;&gt;\"$localdir/index.qmd\"\n    echo \"#image: \\\"preview.png\\\"\" &gt;&gt;\"$localdir/index.qmd\"\n    echo \"comments:\"&gt;&gt;\"$localdir/index.qmd\"\n    echo \"  giscus:\"&gt;&gt;\"$localdir/index.qmd\"\n    echo \"    repo: \\\"adam-coates/adam-coates.github.io\\\"\"&gt;&gt;\"$localdir/index.qmd\"\n    echo \"    mapping: \\\"title\\\"\"&gt;&gt;\"$localdir/index.qmd\"\n    echo \"date: \\\"$date\\\"\" &gt;&gt;\"$localdir/index.qmd\"\n    echo \"categories: []\"&gt;&gt;\"$localdir/index.qmd\"\n    echo \"draft: false #  setting this to `true` will prevent your post from appearing on your listing page until you're ready\" &gt;&gt;\"$localdir/index.qmd\"\n    echo \"#css: style.css\"&gt;&gt;\"$localdir/index.qmd\"\n    echo \"---\" &gt;&gt;\"$localdir/index.qmd\" \n\n\n    # Open the file in Neovim\n    nvim '+ normal 2GzzA' \"$localdir/index.qmd\"\n}\n\n\n\n\nChecking if a backup is needed\nI then create a function that checks if files stored locally are the same as files stored in my mounted backup drive. Here this function does two things.\n\nFirst check if a file that exists locally is or isn‚Äôt stored in my backup.\n\nIt breaks the loop here if thats the case since this is faster.\n\nIf all file metadata are the same in both the local dir and stored in my backup, then it checks if the number of bytes are the same.\n\nIt breaks the loop here if thats the case, since if the bytes differ then the files aren‚Äôt the same\n\nChecks the contents of the files. Its true that the bytes of two files may be identical but with differing content. The script uses the md5sum command to get the checksum of the files. If the content differs so will the check sum.\n\nThis will all be apparent later. But basically this function is used to backup only when local changes are made.\n\n\ncode part 1.3\n\nfunction check_directories {\n    dir1=\"$1\"\n    dir2=\"$2\"\n    differences_found=false\n\n    # Find all files in dir1\n    files=$(find \"$dir1\" -type f)\n\n    # Iterate over each file in dir1\n    for file in $files; do\n        # Get corresponding file path in dir2\n        file_in_dir2=\"${file/$dir1/$dir2}\"\n\n        # Check if the file exists in dir2\n        if [ ! -f \"$file_in_dir2\" ]; then\n            echo \"File $file_in_dir2 does not exist in $dir2\"\n            differences_found=true\n            continue\n        fi\n\n        # Use cmp command to check if files differ\n        if ! cmp -s \"$file\" \"$file_in_dir2\"; then\n            echo \"Files differ:\"\n            echo \"  $file\"\n            echo \"  $file_in_dir2\"\n\n            # Calculate the checksums of the files\n            checksum1=$(md5sum \"$file\" | awk '{ print $1 }')\n            checksum2=$(md5sum \"$file_in_dir2\" | awk '{ print $1 }')\n\n            # Compare the checksums\n            if [ \"$checksum1\" != \"$checksum2\" ]; then\n                echo \"File contents are different.\"\n                differences_found=true\n            fi\n        fi\n    done\n\n    if [ \"$differences_found\" = true ]; then\n        return 1\n    else\n        return 0\n    fi\n}\n\n\n\n\nBash is on the case $1 in write) esac\nNow lets move onto the case statement. Case statements are great in bash because they‚Äôre easy and let you do parse inputs to scripts with ease. Bash‚Äôs handy $1 built-in variable means the first argument passed to a script. So say I run a script called my_script.sh foobar the value stored in $1 will be foobar.\nSo when I run my script and the argument is ‚Äúwrite‚Äù. The script gets some info (title & description), makes the document and opens neovim.\nWhen I type the argument ‚Äúbackup‚Äù, the script immediately copies all contents of the blog to my mounted drive (regardless of checking for file differences)\nWhen I type ‚Äúpub‚Äù, the script pushes all changes to GitHub. It asks for input first what the commit message should be.\nWhen I type ‚Äúpreview‚Äù the script changes directory (cd‚Äôs) into the locally stored blog directory and runs the quarto preview command.\n\n\ncode part 2\n\ncase \"$1\" in \n    write)\n        get_info\n\n        create_file\n\n        ;;\n\n    backup)\n\n        echo -ne \"$(ColorRed 'Backing up now ... ')\"; echo \"\"\n        spinner cp -rf  ~/adam-coates.github.io/ /mnt/g/blog/\n        echo -ne \"$(ColorGreen 'Files now backed up \\u2714')\"; echo \"\"\n        ;;\n\n    pub)\n        read -p \"Enter a commit message: \" commitmessage\n        cd $blogdir/..\n        git add .\n        git commit -m \"$commitmessage\"\n        git push -u origin main\n\n        ;;\n\n    preview)\n        cd \"$blogdir/..\"\n        quarto preview\n\n        ;;\n\n    *)\n\n    echo \"Please enter either write|backup|pub|preview\"\n    ;;\n\nesac\n\n\n\n\nBacking up!\nFinally the script does a backup if I did not use ‚Äúbackup‚Äù as the first argument to the script. This is something I learnt the hard way. Always backup. Backup many times, to the cloud ‚òÅ, to a usb, to another hard drive. No matter how you do it back up üíæüíø. Its so important.\nSo in this script this section always runs!! It first asks the user if they would really want to back up. If the user says (YES, yes, Y or y) then it will proceed. First it does the handy file check to see if a backup is even needed. i.e if there is a difference between my mounted drive and locally stored files is found then it will backup else, nothing will happen.\nHere the visual spinner comes in handy since it helps show me that something really is happening and backing up. I like this and it puts me at ease (not to mention it looks kinda cool)\n\n\n\n\n\nAs I mentioned at the beginning I use colours and for this not backing up will always be in red. Since this really isn‚Äôt a good thing.\n\n\ncode part 3\n\nif [[ \"$1\" != \"backup\" ]]; then\necho -ne \"Would you like to back up? $(ColorGreen 'yes')/$(ColorRed 'no')\n\"\nread -r check\ncheck=$(echo \"$check\" | tr '[:upper:]' '[:lower:]')\nif [[ $check == \"yes\" || $check == \"y\" ]]; then\n    echo -ne \"$(ColorPurple 'Checking if needing to back up ')\"; spinner sleep 5; echo -ne \"$(ColorGreen '\\u2714')\"; echo \"\"\n    if ! check_directories $blogdir /mnt/g/blog/adam-coates.github.io/posts/; then\n        echo -ne \"$(ColorRed 'Different files detected backing up now ... ')\"; echo \"\"\n        spinner cp -rf  ~/adam-coates.github.io/ /mnt/g/blog/\n        echo -ne \"$(ColorGreen 'Files now backed up \\u2714')\"; echo \"\"\n    else\n        echo \"\"\n        echo -ne \"$(ColorGreen 'Files are already backed up \\u2714')\"; echo \"\"\n    fi\n    elif [[ $check == \"no\" || $check == \"n\" ]]; then\n    exit\nelse\n    echo \"Invalid choice. Please enter 'yes' or 'no'. Exiting now.\"\n fi\nfi\n\nAnd that‚Äôs about it. I‚Äôll put the full script available on GitHub and please feel free if you have questions to write them below, or on GitHub itself.\nScript available here"
  },
  {
    "objectID": "posts/2024-03-11/index.html",
    "href": "posts/2024-03-11/index.html",
    "title": "Easy way to make a gif",
    "section": "",
    "text": "Gifs are handy\n\nGifs or jifs (however you pronounce it)\n\nare very handy because they‚Äôre essentially mini videos and can be useful to explain or depict anything you‚Äôd like them to.\nFor example, the gif in the previous blog was used to show what the ‚Äòspinner‚Äô I made looks like in bash e.g: \nWithout the gif it perhaps wouldn‚Äôt be so obvious what I really meant by this spinner. And the code didn‚Äôt really give too much of an indication of what the spinner looked like.\nTake this other example.\n\nShowing slice-by-slice in the axial view of the brain, one can see the diverse changes in grey and white matter.\n\nNow you might say that okay you can depict this using images and thats true you can (and of course in an fMRI article you should definitely not use a gif but images). A gif on the other hand can just be a bit more visually appealing. (For this blog I‚Äôm kinda aiming for some visual appeal, no matter how cheesy it looks).\n\n\n\n\nmy brain\n\n\n\n\n\nHow to easily create a gif of anything you see on the screen.\nRecently I came across this tool that allows you to capture anything visible on your screen and turn it into a gif and I‚Äôm ashamed I never knew something like this existed.\nThe great thing about this is that it avoids opening a tool like obs to create a video of the screen, then using FFmpeg to convert the .mp4 to .gif.\nAll this used to take quite a bit of time before. Whereas now I can create a gif, in as much time as it takes for the program to load and for me to click record.\n\n\nWhats this tool\nThe tool is open source at GitHub ScreenToGif\nThe only downside of it, as far as I can tell it is only available for windows (so far). But it seems that the maintainer of the project wants to port this to MacOS and Linux.\nHere‚Äôs how it looks like\n\nAnd here‚Äôs the output from above (its in black and white here because the editor allows you to export without colours to save render times and storage)\n\n\n\nWindows‚Äôs fun .NET assembly\nAs far as I can tell Windows .NET assembly really lacks compatibility. I think linux‚Äôs OS is slowly becoming more attractive with greater extensibility. In the future I would aim to drop my windows machine entirely in favour for linux. But for now windows still just works and the GUI of windows 10 will always be ‚Äòenough for my productivity‚Äô.\nAs is often the case, you come across a great tool that works splendid in one OS but it doesn‚Äôt exist in another. I hope that with time there will be greater projects that aim at bridging the gap between cross platformability so that programs like this can be easily ported to other OS‚Äôs.\nHere‚Äôs just one example of a tool that does cross platform development in all OS‚Äôs Avolonia so it seems we are getting there slowly."
  },
  {
    "objectID": "posts/2024-05-09/index.html",
    "href": "posts/2024-05-09/index.html",
    "title": "nvim, mason and LSPs",
    "section": "",
    "text": "It‚Äôs been a while\nI haven‚Äôt forgotten about the blog, I just haven‚Äôt had much time lately to be able to think about writing the 2nd part from the previous blog.\n\nNearly every PhD student probably feels the same that there is not enough hours in the day to complete what they want to get completed\nRegardless, of that personally the PhD is progressing well and a lot of my time has been focused towards that.\n\n\nI‚Äôve also been working on my arch Linux setup recently too and there will be many blogs to follow about that\n\n\n\nneovim and Mason\n\nLike what Lazy is to neovim as a plugin manager. Mason is an neovim plugin that manages LSPs, linters, formatters and debug adapters (since I don‚Äôt have any debug adapters or linters installed right now this blog will skip over them).\nBut I have recently tried to code a bit in c++ and there is a decent debug adapter for that (so debug adapters I might mention later)\nMason installs language server protocols on neovim and does so using npm.\nNode (npm) is a really great tool and really works well in downloading LSPs and allowing them to work.\n\nBelow is what the mason ui looks like:\n\n\n\n\nMason GUI example\n\n\n\nIt is really easy to use since you can scroll through the available list of LSPs, linters, formatters and debug adapters to be able to install the ones that you want to use. However, there is a bit more going on in the background than just this simple ui.\n\nIn the previous blog I showed what my configuration was for nvim-cmp\nBut now I‚Äôll show the mason, lspconfig and the dressing and formatting parts of the config\n\n\n\nMason.lua\nAs mention above, mason is a great gui to be able to install and manage external tools to interface with nvim.\nreturn {\n    \"williamboman/mason.nvim\",\n    dependencies = {\n        \"williamboman/mason-lspconfig.nvim\",\n        \"WhoIsSethDaniel/mason-tool-installer.nvim\",\n    },\n\n    config = function()\n        -- import mason\n        local mason = require(\"mason\")\n\n        -- import mason-lspconfig\n        local mason_lspconfig = require(\"mason-lspconfig\")\n\n        local mason_tool_installer = require(\"mason-tool-installer\")\n        -- enable mason and configure icons\n        mason.setup({\n            ui = {\n                icons = {\n                    package_installed = \"‚úì\",\n                    package_pending = \"‚ûú\",\n                    package_uninstalled = \"‚úó\",\n                },\n            },\n        })\n\nThe first part of the code is just to require some of the dependencies that are needed to be able to configure the LSP\nWe also require the mason tool installer to be able to install certain formatters\n\n\n        mason_lspconfig.setup({\n            -- list of servers for mason to install\n            ensure_installed = {\n                \"html\",\n                \"cssls\",\n                \"tailwindcss\",\n                \"lua_ls\",\n                \"pyright\",\n                \"matlab_ls\",\n                \"bashls\",\n                \"marksman\",\n                \"ltex\",\n                \"r_language_server\",\n                \"clangd\",\n            },\n            -- auto-install configured servers (with lspconfig)\n            automatic_installation = true, -- not the same as ensure_installed\n        })\n        mason_tool_installer.setup({\n            ensure_installed = {\n                \"prettier\", -- prettier formatter\n                \"stylua\", -- lua formatter\n                \"isort\", -- python formatter\n                \"black\", -- python formatter\n                \"clang-format\",\n            },\n        })\n    end,\n}\n\nThe rest of the mason.lua file contains the LSP servers to install and qhich formatters to install\nFor example we want to ensure that pyright is installed\n\npyright is an LSP specific to python language\n\nWe also want to ensure that the formatter ‚Äòblack‚Äô is installed for python\n\nthis will ensure that every python file is formatted in the same way\n\n\n\nNow we have these LSPs installed we want to be then configure these to work with nvim and to ensure that they show up correctly in our completion menu\n\n\n\nlspconfig.lua\n\nThe lspconfig file is really used to setup each LSP since each LSP has its own setup requirements e.g.¬†LSPsetup\nPut simply though there is a basic kind of setup that each requires and that is that the LSP should attach to buffers (fancy name for currently opened file) that are relevant for it and to enable the capabilities of the LSP\n\nreturn {\n    \"neovim/nvim-lspconfig\",\n    event = { \"BufReadPre\", \"BufNewFile\" },\n    dependencies = {\n        \"hrsh7th/cmp-nvim-lsp\",\n        { \"antosha417/nvim-lsp-file-operations\", config = true },\n    },\n    config = function()\n        -- import lspconfig plugin\n        local lspconfig = require(\"lspconfig\")\n\n        -- import cmp-nvim-lsp plugin\n        local cmp_nvim_lsp = require(\"cmp_nvim_lsp\")\n\n        local keymap = vim.keymap -- for conciseness\n        vim.api.nvim_create_autocmd(\"LspAttach\", {\n            group = vim.api.nvim_create_augroup(\"UserLspConfig\", {}),\n            callback = function(ev)\n                -- Buffer local mappings.\n                -- See `:help vim.lsp.*` for documentation on any of the below functions\n                local opts = { buffer = ev.buf, silent = true }\n\n                -- set keybinds\n                opts.desc = \"Show LSP references\"\n                keymap.set(\"n\", \"gR\", \"&lt;cmd&gt;Telescope lsp_references&lt;CR&gt;\", opts) -- show definition, references\n\n                opts.desc = \"Go to declaration\"\n                keymap.set(\"n\", \"gD\", vim.lsp.buf.declaration, opts) -- go to declaration\n\n                opts.desc = \"Show LSP definitions\"\n                keymap.set(\"n\", \"gd\", \"&lt;cmd&gt;Telescope lsp_definitions&lt;CR&gt;\", opts) -- show lsp definitions\n\n                opts.desc = \"Show LSP implementations\"\n                keymap.set(\"n\", \"gi\", \"&lt;cmd&gt;Telescope lsp_implementations&lt;CR&gt;\", opts) -- show lsp implementations\n\n                opts.desc = \"Show LSP type definitions\"\n                keymap.set(\"n\", \"gt\", \"&lt;cmd&gt;Telescope lsp_type_definitions&lt;CR&gt;\", opts) -- show lsp type definitions\n\n                opts.desc = \"See available code actions\"\n                keymap.set({ \"n\", \"v\" }, \"&lt;leader&gt;ca\", vim.lsp.buf.code_action, opts) -- see available code actions, in visual mode will apply to selection\n\n                opts.desc = \"Smart rename\"\n                keymap.set(\"n\", \"&lt;leader&gt;rn\", vim.lsp.buf.rename, opts) -- smart rename\n\n                opts.desc = \"Show buffer diagnostics\"\n                keymap.set(\"n\", \"&lt;leader&gt;D\", \"&lt;cmd&gt;Telescope diagnostics bufnr=0&lt;CR&gt;\", opts) -- show  diagnostics for file\n\n                opts.desc = \"Show line diagnostics\"\n                keymap.set(\"n\", \"&lt;leader&gt;d\", vim.diagnostic.open_float, opts) -- show diagnostics for line\n\n                opts.desc = \"Go to previous diagnostic\"\n                keymap.set(\"n\", \"[d\", vim.diagnostic.goto_prev, opts) -- jump to previous diagnostic in buffer\n\n                opts.desc = \"Go to next diagnostic\"\n                keymap.set(\"n\", \"]d\", vim.diagnostic.goto_next, opts) -- jump to next diagnostic in buffer\n\n                opts.desc = \"Show documentation for what is under cursor\"\n                keymap.set(\"n\", \"K\", vim.lsp.buf.hover, opts) -- show documentation for what is under cursor\n\n                opts.desc = \"Restart LSP\"\n                keymap.set(\"n\", \"&lt;leader&gt;rs\", \":LspRestart&lt;CR&gt;\", opts) -- mapping to restart lsp if necessary\n            end,\n        })\n\nBefore setting up each LSP the file first requires some dependencies and sets up some key mappings\nThe dependency cmp-nvim-lsp is used to provide a completion like menu to the LSP and this works well with our previous plugin discussed in the previous blog, nvim-cmp\nNext we create an autocmd that runs any time an LSP is loaded and this just ensures that the LSP attaches to the buffer\nThe key mappings:\n\n\n‚ÄúShow LSP references‚Äù - shows the references of the LSP under the cursor\n‚ÄúGo to declaration‚Äù - jumps to where something is declared, e.g.¬†if the cursor is under a function this will go to where the function is defined (even if its defined in a different file)\n‚ÄúShow LSP definitions‚Äù - shows the LSP definitions of whats under the cursor\n‚ÄúShow LSP implementations‚Äù - shows how whats under the cursor can be implemented\n‚ÄúShow LSP type definitions‚Äù - shows type definitions under the cursor for example in typescript\n‚ÄúSee available code actions‚Äù - opens a menu to select any actions that can be performed with the code that is under the cursor\n\ne.g.¬†here I misspelled the word performed\n\n\n\n\ncode actions menu\n\n\n\nHere the code actions menu is shown, however it is easier for a misspelled word to correct this using nvim built in keymap z= that opens the spelling correction menu\n\n‚ÄúSmart rename‚Äù - rename anything under the cursor, smart renaming can rename functions and if the same function is called in a different file it will also rename that function\n‚ÄúShow buffer diagnostics‚Äù - opens up the buffer diagnostics menu and allows the user to cycle through the list to address any errors etc. this shows a menu like fuzzy finder\n\ne.g.¬†\n\n\n\n\ndiagnostic menu\n\n\n\n\n‚ÄúShow line diagnostics‚Äù - same as above but for only the current line\n‚ÄúGo to previous diagnostic‚Äù / ‚ÄúGo to next diagnostic‚Äù - to jump through the buffer to the next or previous diagnostic\n‚ÄúShow documentation for what is under cursor‚Äù - self explanatory\n‚ÄúRestart LSP‚Äù - again self explanatory sometimes its needed to restart the LSP but this is pretty rare\n\n\n        -- used to enable autocompletion (assign to every lsp server config)\n        local capabilities = cmp_nvim_lsp.default_capabilities()\n        -- Change the Diagnostic symbols in the sign column (gutter)\n        local signs = { Error = \"ÔÅó \", Warn = \"ÔÅ± \", Hint = \"Û∞†† \", Info = \"ÔÅö \" }\n        for type, icon in pairs(signs) do\n            local hl = \"DiagnosticSign\" .. type\n            vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = \"\" })\n        end\n\n        -- configure html server\n        lspconfig[\"html\"].setup({\n            capabilities = capabilities,\n            --      on_attach = on_attach,\n        })\n\n        -- configure css server\n        lspconfig[\"cssls\"].setup({\n            capabilities = capabilities,\n            --      on_attach = on_attach,\n        })\n\n        -- configure tailwindcss server\n        lspconfig[\"tailwindcss\"].setup({\n            capabilities = capabilities,\n            --      on_attach = on_attach,\n        })\n\n        -- configure python server\n        lspconfig[\"pyright\"].setup({\n            capabilities = capabilities,\n            --      on_attach = on_attach,\n        })\n        -- configure matlab server\n        lspconfig[\"matlab_ls\"].setup({\n            capabilities = capabilities,\n            --        on_attach = on_attach,\n        })\n        -- configure bash server\n        lspconfig[\"bashls\"].setup({\n            capabilities = capabilities,\n            --        on_attach = on_attach,\n        })\n        lspconfig[\"marksman\"].setup({\n            capabilities = capabilities,\n            --            on_attach = on_attach,\n            filetypes = { \"markdown\", \"quarto\" },\n        })\n        lspconfig[\"clangd\"].setup({\n            capabilities = capabilities,\n        })\n        lspconfig[\"r_language_server\"].setup({\n            capabilities = capabilities,\n            --        on_attach = on_attach,\n            settings = {\n                r = {\n                    lsp = {\n                        rich_documentation = false,\n                    },\n                },\n            },\n        })\n        lspconfig[\"ltex\"].setup({\n            capabilities = capabilities,\n            --           on_attach = on_attach,\n            settings = {\n                ltex = {\n                    language = \"en-GB\",\n                },\n            },\n        })\n        vim.api.nvim_create_user_command(\"LtexLangChangeLanguage\", function(data)\n            local language = data.fargs[1]\n            local bufnr = vim.api.nvim_get_current_buf()\n            local client = vim.lsp.get_active_clients({ bufnr = bufnr, name = \"ltex\" })\n            if #client == 0 then\n                vim.notify(\"No ltex client attached\")\n            else\n                client = client[1]\n                client.config.settings = {\n                    ltex = {\n                        language = language,\n                    },\n                }\n                client.notify(\"workspace/didChangeConfiguration\", client.config.settings)\n                vim.notify(\"Language changed to \" .. language)\n            end\n        end, {\n            nargs = 1,\n            force = true,\n        })\n        -- configure lua server (with special settings)\n        lspconfig[\"lua_ls\"].setup({\n            capabilities = capabilities,\n            --      on_attach = on_attach,\n            settings = { -- custom settings for lua\n                Lua = {\n                    -- make the language server recognize \"vim\" global\n                    diagnostics = {\n                        globals = { \"vim\" },\n                    },\n                    workspace = {\n                        -- make language server aware of runtime files\n                        library = {\n                            [vim.fn.expand(\"$VIMRUNTIME/lua\")] = true,\n                            [vim.fn.stdpath(\"config\") .. \"/lua\"] = true,\n                        },\n                    },\n                },\n            },\n        })\n    end,\n}\n\nNext we define some symbols that the LSP uses for error, warn, hint and info\nThen the configuration comes\nFor each of the installed LSPs we have to ensure the default capabilities are enabled\nFor Ltex-ls you have to additonally define the language it should use\nltex-ls is a grammar and spelling checker that is usful when writing latex documents or markdown\nI define here an additional function that allows me to change the language of ltex as and when needed (similar to vim‚Äôs set spelllang command)\nFor the lua lsp it is needed to also ensure that .vim files are included and the paths to where the runtime files might be included\n\n\n\nformatting.lua\n\nformatting is useful to autoformat files\nfor instance if we are indenting then the number of tabs or spaces will be the same across all files\n\nreturn {\n  \"stevearc/conform.nvim\",\n  event = { \"BufReadPre\", \"BufNewFile\" },\n  config = function()\n    local conform = require(\"conform\")\n\n    conform.setup({\n      formatters_by_ft = {\n        javascript = { \"prettier\" },\n        typescript = { \"prettier\" },\n        javascriptreact = { \"prettier\" },\n        typescriptreact = { \"prettier\" },\n        svelte = { \"prettier\" },\n        css = { \"prettier\" },\n        html = { \"prettier\" },\n        json = { \"prettier\" },\n        yaml = { \"prettier\" },\n        markdown = { \"prettier\" },\n        graphql = { \"prettier\" },\n        liquid = { \"prettier\" },\n        lua = { \"stylua\" },\n        python = { \"isort\", \"black\" },\n      },\n      format_on_save = {\n        lsp_fallback = true,\n        async = false,\n        timeout_ms = 1000,\n      },\n    })\n\n    vim.keymap.set({ \"n\", \"v\" }, \"&lt;leader&gt;mp\", function()\n      conform.format({\n        lsp_fallback = true,\n        async = false,\n        timeout_ms = 1000,\n      })\n    end, { desc = \"Format file or range (in visual mode)\" })\n  end,\n}\n\nHere I require the plugin\nthen simply set which formatter to use for each file type\nwe set a keymap to carry out the formatting and whether or not to format when the file is saved\n\n\n\nLSP is set up\n\nonce all the above is in place LSP and formatting is set up\ncouple this with my previous blog about completion we now get completion from the LSPs\nthe LSPs provide completion beyond what snippets can offer because there is a larger range of LSPs availble\nBelow this plugin is optional but it makes the UI much prettier overall and since this blog and the previous one has been about the completion menu and about LSPs it makes sense to include the plugin below also\n\n\n\ndressing.lua\nreturn {\n    \"stevearc/dressing.nvim\",\n    event = \"VeryLazy\",\n}\n\n\n\n\ndressing example\n\n\n\n\ndressing provides some of the borders around certain menu ui‚Äôs in neovim"
  },
  {
    "objectID": "posts/2024-05-31/index.html",
    "href": "posts/2024-05-31/index.html",
    "title": "WPS office and zotero plugin",
    "section": "",
    "text": "WPS office\n\nI‚Äôve been experimenting with linux recently quite a lot and I really am enjoying the setup that I have right now\nOne of the things I didn‚Äôt think I actually would miss but I kind of do a bit is Microsoft Office\nThe upside to linux however is that there is free programs that try to replace Microsoft Offices ridiculously priced Office program bundle\nThis is great, however these free programs don‚Äôt quite cut the mustard\n\n\n\nLibre office\n\nLibre office is okay, it has some of the features that Microsoft Office applications have but not all\nThe UI is terrible though (especially if you‚Äôre someone like me who comes from Microsoft Office‚Äôs UI) the UI seems really outdated\nBut Microsoft Offices UI also has quite a number of shortcomings and I found that I really hate the whole idea of ribbons and trying to find something really specific oftentimes leads to some googling (and now probably some chatGPT-ing)\n\n\nBut there is a trick to get the UI in LibreOffice to look better and more like Microsoft Offices\n\n\nLibre Office also natively supports Zotero\nBut over all there is just a massive lack of features in Libre Office (I won‚Äôt list all of them but when creating a presentation recently I found a lot of missing things that made making a presentation really difficult and so I had to spin-up my windows machine instead)\n\n\n\nWPS office\n\nThen I came across a reddit thread in the Linux community that specifically discussed the available alternatives to Microsoft Office in Linux\nI found WPS office and was pleasantly surprised at the number of features that it really has\nBut one thing that it doesn‚Äôt support is a zotero plugin\nI came across this thread with others like me that were disappointed by this: WPS Office integration with zotero\n\n\n\nWPS Office plugin for zotero\n\nThere appears to be a zotero plugin made on github\n\nIt was easy to install by following these steps\n1. git clone https://github.com/tankwyn/WPS-Zotero.git\n2. cd WPS-Zotero\n3. ./install.py\n‚Ä¶ and that‚Äôs it\nStraight out of the box the plugin works for WPS Office\n\n\n\nWPS example with zotero\n\n\n\n\nMaybe time to write using latex?\n\nI have thought about this for a while\nI use neovim and do a lot of writing just using markdown files\nI think that I would really like to be able to move entirely away from relying on a word processor program but for things like making presentations I don‚Äôt see any other alternatives than either using online Microsoft Office, Google docs, Libre Office or WPS Office\nIn neovim I can create and automatically preview markdown files in a browser\nI can then use the zotero plugin to put references into the markdown file from zotero\nI can then convert this markdown file to a .pdf or .docx with a filter to render the references from the zotero plugin first, and then a second filter to render these references into apa style for example:\n\n\npandoc test.md -o test.pdf -F otref.py --citeproc --csl /mnt/g/apa.csl\n\n\nThen with some yaml header and some additional formatting specific to latex and/ or pandoc rendering inside the document itself its possible to get a document that looks pretty nice\nPandoc additionally supports some html tags too for example:\n\n\n&lt;span style=\"font-variant:small-caps;\"&gt;This will be in small caps!&lt;/span&gt;\n\n(Even quarto renders the html tags, but this makes sense since it is essentially a wrapper for pandoc that also executes and runs r and python code This will be in small caps!`)\nTherefore I think in the future I will be switching to using just a markdown editor like neovim will be beneficial in the long run. It makes sense that the idea of a word processor is to write words and not to be spend hours upon hours formatting and getting everything to look pretty.\nHeres a blog post I like that shows of vims power in latex using snippets"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Recent Blog Posts",
    "section": "",
    "text": "WPS office and zotero plugin\n\n\n\nLinux\n\n\nWPS\n\n\nZotero\n\n\n\nWPS office does not natively support zotero but there‚Äôs a github repo that does this\n\n\n\n\n\n\nMay 31, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nnvim, mason and LSPs\n\n\n\nneovim\n\n\ntools\n\n\ncoding\n\n\n\nfollow-up to the blog about nvim autocompletion. Here I describe what mason is and what LSPs are in more detail and provide a fuller picture of autocompletion in neovim\n\n\n\n\n\n\nMay 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nA completion source for Neovim\n\n\n\nneovim\n\n\ntools\n\n\ncoding\n\n\n\nHow I set up snippets and language server protocols for code completion\n\n\n\n\n\n\nApr 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nCropping an image using a bash script\n\n\n\nbash\n\n\ntools\n\n\n\nHere I show how to crop an image using imagemagick covert function\n\n\n\n\n\n\nMar 17, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSimple plotting in r and python\n\n\n\nR\n\n\npython\n\n\n\nI show simple basic plotting methods using ggplot2 and matplotlib\n\n\n\n\n\n\nMar 12, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEasy way to make a gif\n\n\n\ntools\n\n\nwindows\n\n\ncross-platform\n\n\n\nA screen recorder-y way to make gifs on the screen\n\n\n\n\n\n\nMar 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe script that makes the website\n\n\n\nbash\n\n\n\nHere I‚Äôll write about the script that I‚Äôve written to make posting to this blog easier\n\n\n\n\n\n\nMar 10, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat‚Äôs the best notebook\n\n\n\ncoding\n\n\nneovim\n\n\nquarto\n\n\n\nand why I started this blog?\n\n\n\n\n\n\nMar 9, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2024-03-17/index.html",
    "href": "posts/2024-03-17/index.html",
    "title": "Cropping an image using a bash script",
    "section": "",
    "text": "Why?\nIf you‚Äôre like me and have a lot of images to crop regularly then a more efficient way to crop is probably something that you need!\nI used to do all my cropping manually with the mouse, and I will probably still do some cropping with the mouse. But when I often have a set of images that all need to be cropped then I always try to find the fastest way to do this in bulk.\n\n\nTheres many ways to tackle this issue\nOf course there are pre-made software that will do this for you, and there are Python ways, C and C++ ways, using PowerPoint, Paint, PhotoShop (dare I say it) even MATLAB ways to achieve this. Yet ImageMagick has always been around! In fact it was made way back in 1987 and now can easily read and write over 200 image file formats according to Wikipedia.\nBut aside from the extensive functionality, you can create images directly from the command line in bash. This means that you quite easily loop over all files in a directory and subject each file to the exact same editing options that you want them to have.\nAnd this is great, especially for scientific papers since having a figure x number of pixels too big for some journals won‚Äôt cut the mustard.\n\n\nHow to make/ run the script\nSo since I always need to crop fMRI images in particular ways, (i.e.¬†maybe I want to crop and only show a particular region for each participant), it would be relatively easy to achieve this.\nTake the following example.\n\n\n\n\nHere I have manually drawn a segmentation on my own brain and we see the coronal view of the brain\n\n\n\nLet‚Äôs suppose I want to crop this region out and make a zoomed in part of this to get a closer look at the activation in this region.\nI could do this in PowerPoint but now imagine I have 100 participants all with the same coloured region.\n\n\nThe bash script\nThe full script will be available on my GitHub here\n\nIn the interest of keeping this blog short, I want to avoid talking about how arguments are parsed in the script but instead about what the script really does and the output.\n\n\nThe steps\n\nStep 1\n#!/usr/bin/env bash\n# ... the code runs as a function and before this there is only a case statement and some variables are predefined, please see full script on my GitHub\n\n# ---------------------\n# STEP:         1\n# ---------------------\n\n# Create a temporary text file\ntemp_textfile=$(mktemp \"$(dirname \"$input_file\")/temp_file.XXXXXX.txt\")\n\n# Convert the image to a text file\nconvert \"$input_file\" txt:- &gt; \"$temp_textfile\"\n\n# Find all coordinates of the specified color\ncoordinates=$(grep \"srgb($color)\" \"$temp_textfile\" | cut -d ':' -f 1)\nFirst the script converts the image into a temporary text file. The text file is essentially coordinates of the pixel plus what the pixel represents in RGB, hex and sRGB format. So a typical row might look like:\n\n201,0: (2,2,2)  #020202  srgb(2,2,2)\n\n\nThe script allows the user to specify what colour to search for by using the following flag -c plus the colour in RGB format without spaces i.e.¬†-c 255,0,0\n\n\n\n\nStep 2\n# ---------------------\n# STEP:         2\n# ---------------------\n\n# Find the minimum and maximum x and y coordinates\nmin_x=$(echo \"$coordinates\" | cut -d ',' -f 1 | sort -n | head -n 1)\nmax_x=$(echo \"$coordinates\" | cut -d ',' -f 1 | sort -n | tail -n 1)\nmin_y=$(echo \"$coordinates\" | cut -d ',' -f 2 | sort -n | head -n 1)\nmax_y=$(echo \"$coordinates\" | cut -d ',' -f 2 | sort -n | tail -n 1)\n\n# Add padding to the minimum and maximum x and y coordinates\nmin_x=$((min_x - padding))\nmax_x=$((max_x + padding))\nmin_y=$((min_y - padding))\nmax_y=$((max_y + padding))\nThe script uses this in order to find the pixels with a particular colour and saves the coordinates. Coordinates are first split into x and y by a comma\nHere‚Äôs an example of the coordinates variable output:\n\n‚Ä¶976,497 977,497 978,497 979,497 980,497 981,497 982,497 983,497 984,497 985,497 986,497 987,497 988,497 989,497 990,497 991,497 992,497 993,497 994,497 995,497 952,498 953,498 954,498 955,498‚Ä¶\n\nThe head and tail commands are used to get the highest and the lowest coordinate. These coordinates are then the ‚Äòbounding box‚Äô in which we want to cut out or draw a box around.\nHere‚Äôs an example maximum and minimum x and y coordinates with the padding:\n\nmin x = 947 max x = 1014 min y = 452 max y = 562\n\n\nNote the padding can be altered by using the flag -p plus a number of pixels (the default is 5)\n\n\n\n\nStep 3\n# ---------------------\n# STEP:         3\n# ---------------------\n\nif [ \"$type\" == \"crop\" ]; then\n    echo \"Crop\"\n    temp_file=$(mktemp \"$(dirname \"$input_file\")/temp.XXXXXX.png\")\n    convert -size $(identify -format \"%wx%h\" \"$input_file\") xc:black -fill \"white\" \\\n        -draw \"rectangle $min_x,$min_y $max_x,$max_y\" png:- &gt; \"$temp_file\"\n    convert \"$input_file\" \"$temp_file\" -alpha off -compose copy_opacity \\\n        -composite -trim +repage -geometry x$(identify -format \"%h\" \"$temp_file\") \"$output_file\"\n    # remove temp file\n    rm \"$temp_file\"\nelse\n#...\nThe easiest way for imagemagick to cut out a rectangle from an image is to create a mask first. So here we create a mask of the first image that was used to get the coordinates from. The mask is a black and white image that shows the region to cut out. The second command uses the mask to cut out the original image.\n\n\n\n\nAn example mask created\n\n\n\nThe region is then used to cut out from the original image as such:\n\n\n\n\nThe image is now cropped\n\n\n\n\n\n\nStep 4\n# ---------------------\n# STEP:         4\n# ---------------------\n\n    echo \"Box\"\n    # Draw bounding box around all the identified coordinates\n    convert \"$input_file\" -fill none -stroke white -strokewidth 3 \\\n        -draw \"stroke-dasharray 10 10 rectangle $min_x,$min_y $max_x,$max_y\" \"$output_file\"\nfi\n\n# Remove the temporary text file\nrm \"$temp_textfile\"\nI added another option in the script since sometimes we only want to draw an outline of the region on the original image this outputs the following image:\n\n\n\n\nThe image represents a white outline which is the region that could be cropped out\n\n\n\n\n\n\n\nHow to edit the command\n\nTo edit some of the options in the script the user might want to pay attention to the following commands:\n\n\nconvert -size $(identify -format \"%wx%h\" \"$input_file\") xc:black -fill \"white\" \\\n        -draw \"rectangle $min_x,$min_y $max_x,$max_y\" png:- &gt; \"$temp_file\"\nconvert \"$input_file\" \"$temp_file\" -alpha off -compose copy_opacity \\\n        -composite -trim +repage -geometry x$(identify -format \"%h\" \"$temp_file\") \"$output_file\"\nconvert \"$input_file\" -fill none -stroke white -strokewidth 3 \\\n        -draw \"stroke-dasharray 10 10 rectangle $min_x,$min_y $max_x,$max_y\" \"$output_file\"\n\nEspecially the third command in which we use the stroke-dasharray this essentially creates the white dashed line. Of course the stroke and the width can also be changed to what the user desires.\nIn the future, I will perhaps add options when running the command in order to change how the output will look like without having to edit the 3 convert commands above."
  },
  {
    "objectID": "posts/2024-04-01/index.html",
    "href": "posts/2024-04-01/index.html",
    "title": "A completion source for Neovim",
    "section": "",
    "text": "What language server protocols are?\nNeovim, VScode, Sublime Text or emacs, all use something called language server protocols (LSPs). LSPs are ‚Äúlanguage intelligence tools‚Äù and essentially offer your code editor of choice a way to know\n\n\nwhat coding language you‚Äôre currently editing in\nwhich documentation to provide for said language\nhow to auto complete in said language\n\n\nFor example, if you wanted to create some Python code, how can you speed up the process of writing code.\nThink of LSPs as kind of like a smart dictionary.\n\nNeovim‚Äôs code completion system\nOf course, with Neovim there are a bunch of different types of plugins that you can use, some of which achieve the same kind of functionailty but with slightly different features.\nHowever, for the setup that I use, I use nvim-cmp which is a completion engine plugin. This means that essentially I can provide nvim-cmp a list of sources in which I want to use to carry out autocompletion.\nI use another plugin called cmp-nvim-lsp and this is specifically used for LSP completions that I will talk about in the next blog here.\nThese include:\n\nsnippets (including my own snippets)\ncompletions from path I‚Äôm writing\ncompletions from current document (if a document contains a word then a text completion is available)\nZotero reference snippets (useful for academic writing)\ncompletions from LSPs\n\nThis sounds like a lot and it probably is therefore, I think for the purpose of the blog, this will be split into two parts. This part will explain and show the part of my configuration that carries out completion from non-LSP sources. In the next blog, I talk about how to install and manage LSP sources and how to implement them as part of autocompletion.\n\n\n\nSnippets\nSnippets are great. Have you ever started to write a for loop in bash and then switch to Python and forget the correct syntax for a for loop? Or have you ever wanted to define a function in R only to forget how to do the exact same in bash?\nThis is where snippets come in handy. I always forget for instance how to construct a proper table in markdown. I hardly ever remember how to do that.\nLets start by looking at the first few lines of code for this plugin and then to look at how my snippets are set up and finally how I have defined by own snippets.\nreturn {\n  \"hrsh7th/nvim-cmp\",\n--  event = \"VeryLazy\",\n  dependencies = {\n    \"hrsh7th/cmp-buffer\", -- source for text in buffer\n    \"hrsh7th/cmp-path\", -- source for file system paths\n    \"L3MON4D3/LuaSnip\", -- snippet engine\n    \"saadparwaiz1/cmp_luasnip\", -- for autocompletion\n    \"rafamadriz/friendly-snippets\", -- useful snippets\n    \"onsails/lspkind.nvim\", -- vs-code like pictograms\n    \"jalvesaq/cmp-zotcite\",\n  },\nHere you‚Äôll notice that I am using Lazy.nvim as my neovim plugin manager of choice (a topic for another blog).\nIn this .lua file I use the plugin ‚Äúnvim-cmp‚Äù as an autocompletion engine that depends upon several other plugins. For example, the ‚Äúfriendly-snippets‚Äù plugin is used to be able to use the community driven snippets that others have made for a whole range of coding languages.\nconfig = function()\n    local cmp = require(\"cmp\")\n\n    local luasnip = require(\"luasnip\")\n\n    local lspkind = require(\"lspkind\")\n    _G.LuaSnipConfig = {}\n        -- Helpers\n        function _G.LuaSnipConfig.visual_selection(_, parent)\n            return parent.snippet.env.LS_SELECT_DEDENT or {}\n        end\n\n        function _G.LuaSnipConfig.intext_cite(_, parent)\n            local selected_text = parent.snippet.env.LS_SELECT_DEDENT or {}\n            local extracted_names = {}\n\n            for _, text in ipairs(selected_text) do\n            -- Extract the portion of the text after #\n                local substring = text:match(\"#(.+)\")\n                if substring then\n            -- Replace \"Etal\" or \"Et al.\" with \"et al.\"\n                    substring = substring:gsub(\"_Etal_\", \" et al.,\")\n                    substring = substring:gsub(\"_Et al%.\", \" et al.,\")\n            -- Remove any numbers after \"et al.\"\n                    substring = substring:gsub(\" et al%..*\", \" et al.,\")\n            -- Truncate at the last occurrence of a number\n                    local truncated = substring:gsub(\"_%d+$\", \"\")\n            -- Split by underscores and add to extracted_names\n                    local names = {}\n                    for name in truncated:gmatch(\"([^_]+)\") do\n                        table.insert(names, name .. \" \") -- Add a space at the end of each name\n                    end\n            -- Check if \"etal\" is present\n                    local has_etal = string.find(truncated, \"etal\")\n            -- Concatenate names without \"and\" if \"etal\" is present\n                    if has_etal then\n                        table.insert(extracted_names, table.concat(names))\n                    else\n                -- Concatenate names with \"and\" if there are more than one\n                        if #names &gt; 1 then\n                            table.insert(extracted_names, table.concat(names, \"and \"))\n                        else\n                            table.insert(extracted_names, names[1])\n                        end\n                    end\n                end\n            end\n\n            return extracted_names\n        end\nWe then call the configuration function for cmp, luasnip and lspkind (this is a standard in neovim plugins to ensure proper setup of the plugins)\nI then define two helper functions. Now, these functions are particularly useful for Zotero completions. For instance, when referencing in APA-style it is common to use both a direct in-text reference and an indirect in-text reference. These helper functions are used alongside, my own defined snippets that allows me to change from an indirect to a direct reference.\nIt‚Äôs relatively straightforward. The first helper function _G.LuaSnipConfig.visual_selection(_, parent): declares a function named visual_selection within the Lua global environment (G). The function takes two arguments:  (an underscore indicating an unused variable, commonly used in Lua to indicate that a function argument is not used) and parent. return parent.snippet.env.LS_SELECT_DEDENT or {}: This line returns the value of parent.snippet.env.LS_SELECT_DEDENT if it exists, otherwise it returns an empty table {}.\nThe 2nd function is what the snippet uses to do said formatting. THIS IS A WORK IN PROGRESS THOUGH. For now, the function splits the string based on the ‚Äò#‚Äô present in the reference (see the gif below). It then splits the strings based on if an ‚Äòetal‚Äô is present in the reference, if it is then it ends here and just spits out the first author name plus the et al, followed by the ordinal reference surrounded by square brackets (this notation is documented by pandoc)\nIf an et al is not present, then the function splits the string based on the underscores present and will instead print out the list of names with an ‚Äòand‚Äô inbetween them.\n\n\n\n\nIndirect and direct in-text citations example\n\n\n\n\n\nCompletions from path\nCompletions from path are achieved through the use of the above dependency cmp-path This is relatively straightforward and allows for autocompletion of a path anywhere within the current buffer and look simply like this:\n\n\n\n\nPath completion example\n\n\n\n\n\nCompletions from the current buffer\n\nA buffer is just nvims fancy name for the currently opened document.\n\nCompletions from the current buffer are achieved through another dependency called cmp-buffer Again, this is relatively straightforward and allows for autocompletion of any words currently contained within the buffer that show up as text completion:\n\n\n\n\nText completion example\n\n\n\n\n\nZotero completions\nAs we saw above, zotero completions are an additional possibility as a source for completion. Zotero saves all references as an sqlite database. Basically each reference has its own random character & number string. Then it‚Äôs possible to just search this database based on the keywords from the title or the name of the authors and return a list of possible matches. This is possible with a pair of plugins. The first is a dependency to the nvim-cmp plugin called cmp-zotcite this dependency works with the completion plugin directly (nvim-cmp) to give you a popup list without having to call the omni-completion keybinding ctrl+X ctrl+O.\nThen there is an additional plugin that works as the backend to the dependency that really does the sqlite database search and format into a pandoc way. This is useful particularly in markdown-type files or for note taking since this plugin also offers a way to extract zotero annotations directly from articles.\nHere is the configuration for zotero.lua:\nreturn {\n    \"jalvesaq/zotcite\",\n    dependencies = {\n        \"jalvesaq/cmp-zotcite\",\n  },\n}\nHere is an example of the annotation part of the plugin:\n\n \n\n\n\nThe rest of the lua file\nThe rest of the nvim-cmp.lua file is really related to how the plugin should actually work.\nlocal check_back_space = function()\n            local col = vim.fn.col('.') - 1\n            if col == 0 or vim.fn.getline('.'):sub(col, col):match('%s') then\n                return true\n            else\n                return false\n            end\n        end\nHere I define what pressing the backspace actually does. For instance, when a snippet is loaded, the backspace operates to go back in the queue of the number of auto fill gaps\nFor example in bash:\n\n#bash for loop snippet. When the snippet is loaded\n# the backspace will go backwards to fill in the gaps\n#  between the for, in and ;do.\nfor    in    ;do\n\ndone\n\n\n        require(\"luasnip.loaders.from_vscode\").lazy_load({})\n        require(\"luasnip.loaders.from_vscode\").lazy_load({ paths = './my_snippets' })\n        require(\"luasnip.loaders.from_lua\").lazy_load({ paths = './lua_snippets' })\n        require(\"luasnip\").config.setup({store_selection_keys=\"&lt;C-s&gt;\"})\n        vim.api.nvim_set_keymap('i', '&lt;C-u&gt;', '&lt;cmd&gt;lua require(\"luasnip.extras.select_choice\")()&lt;CR&gt;', {noremap = true})\n        luasnip.filetype_extend(\"vimwiki\", {\"markdown\"})\nIn this section, according to the documentation of luasnip you must require the snippets from the source that the snippets are to be loaded from. Here I also source my own snippets that I have made in the paths ./my_snippets and ./lua_snippets.\nBelow is an example of a snippet:\ns(\n        { trig = 'fm', dscr = 'Front matter' },\n        fmta(\n            [[\n                ---\n                fontsize: 12pt\n                geometry: margin=3cm\n\n                title: &lt;&gt;\n                author: &lt;&gt;\n                date: &lt;&gt;\n                ---\n            ]],\n            {\n                i(1),\n                i(2, 'Adam Coates'),\n                p(os.date, '%d/%m/%Y'),\n            }\n        ),\n        { condition = line_begin }\n    ),\nThis snippet is an autosnippet to automatically write out a yaml header for markdown files, as such:\n\n\n\n\nFront matter snippet example\n\n\n\n        cmp.setup({\n            completion = {\n            completeopt = \"menu,menuone,preview,noselect\",\n            },\n            snippet = { -- configure how nvim-cmp interacts with snippet engine\n                expand = function(args)\n                    luasnip.lsp_expand(args.body)\n                end,\n            },\n            mapping = cmp.mapping.preset.insert({\n            [\"&lt;C-k&gt;\"] = cmp.mapping.select_prev_item(), -- previous suggestion\n            [\"&lt;C-j&gt;\"] = cmp.mapping.select_next_item(), -- next suggestion\n            [\"&lt;C-b&gt;\"] = cmp.mapping.scroll_docs(-4),\n            [\"&lt;C-f&gt;\"] = cmp.mapping.scroll_docs(4),\n            [\"&lt;C-Space&gt;\"] = cmp.mapping.complete(), -- show completion suggestions\n            [\"&lt;C-e&gt;\"] = cmp.mapping.abort(), -- close completion window\n            [\"&lt;CR&gt;\"] = cmp.mapping.confirm({ select = false }),\n            ['&lt;Tab&gt;'] = cmp.mapping(function(fallback)\n                if cmp.visible() then\n                    cmp.confirm({select = true})\n                elseif luasnip.jumpable(1) then\n                    luasnip.jump(1)\n                elseif check_back_space() then\n                    fallback()\n                else\n                    cmp.complete()\n                end\n            end, {'i', 's'}),\n            ['&lt;S-Tab&gt;'] = cmp.mapping(function() luasnip.jump(-1) end, {'i', 's'}),\n            }),\n            vim.keymap.set({ 'i', 's' }, '&lt;C-s&gt;', function()\n                if luasnip.expandable() then\n                    luasnip.expand({})\n                end\n            end),\nThe next part of the code defines some other keybinds for the actual pop-up menu. The first part of this section of code tells nvim-cmp how to display the menu and how the snippets are displayed. Then keybindings are defined for confirm, abort and for scrolling the documentation that comes up for the menu.\nFinally there is some code to define what &lt;TAB&gt; does. This means that if you have a snippet already selected the &lt;tab&gt; works to cycle through the gaps of a snippet to fill in (we saw before that backspace goes backwards through this cycle). If there is an expandable snippet then the &lt;tab&gt; will act to expand the snippet. If these conditions aren‚Äôt met then the &lt;tab&gt; works just as a regular &lt;tab&gt;.\n      -- sources for autocompletion\n      sources = cmp.config.sources({\n        { name = \"luasnip\"}, -- snippets\n        { name = \"nvim_lsp\" },\n        { name = \"buffer\" }, -- text within current buffer\n        { name = \"path\" }, -- file system paths\n        { name = \"cmp_zotcite\" },\n        { name = \"otter\" },\n      }),\n      -- configure lspkind for vs-code like pictograms in completion menu\n      formatting = {\n        format = lspkind.cmp_format({\n          maxwidth = 50,\n          ellipsis_char = \"...\",\n        }),\n      },\n    })\n  end,\n}\nThe final part of the configuration calls the sources that nvim-cmp should look for when actually carrying out the auto completion and the final few lines are just to get some nice pretty pictograms in the menu itself.\n\n\n\n\nPictograms = python example\n\n\n\n\n\nTo be continued‚Ä¶\nThis is of course only part of what make the autocompletion so great in neovim. The whole configuration is much more than just a simple single .lua file and instead involves the interaction between other plugins too.\n\nIn the next blog, I aim to delve a bit more deeply into this configuration by introducing Language Server Protocols (LSPs) and how completions are given on the type of document currently opened.\nFor example we don‚Äôt care about C or C++ autocompletions in a python document."
  },
  {
    "objectID": "posts/2024-03-12/index.html",
    "href": "posts/2024-03-12/index.html",
    "title": "Simple plotting in r and python",
    "section": "",
    "text": "It‚Äôs time to move away from matlab entirely\nWhile MATLAB served me well for a number of years I feel now is the time to completely stop using it all together (except for exceptional use cases, for example Psychtoolbox, but even then I‚Äôm much more inclined to use the open source MATLAB version Octave).\nMATLAB themselves even write about the differences between MATLAB and Python and which one you should use. It‚Äôs true MATLAB‚Äôs documentation on functions and packages is really extensive, easily understandable and takes the lead over Python and R. But this is just because MATLAB is a private company and the subscriptions aren‚Äôt exactly cheap. For MATLAB they argue that you pay for more than just the GUI and software but also this user support (although I‚Äôve never ever picked up the phone and called MATLAB directly with a problem I‚Äôve had).\nStill Python has, in recent years, closed the gap between computational speed of large matrices and with an ever increasing user base, has gained a lot of very useful packages and modules.\nEven R is/ (arguably has) already closed this gap too. And with Rstudios nicely laid out default GUI there is really no excuse even for beginners not to use it.\nMATLAB will always be used in certain fields though because it really just works well, not to mention how easy it is to use (again though the extensive and well-documented functions are partly the reason for this).\nBut R and Python are open source and FREE! Anyone can use them.\n\n\nI want to make plots using in an open source way, how?\nThis blog post won‚Äôt give a full tutorial, just check out a YouTube video for that, theres really loads! Or even ask chatgpt to do it for you, since it seems to do well at basic coding anyway.\nWith a fully configured neovim setup (like the one I have) it makes coding easier and much faster to do. This is an additional reason to move away from MATLAB since you almost have to do everything inside of MATLABs gui.\n\n\nBar plots\nHere‚Äôs an example bar plot plot in R using ggplot:\n\nlibrary(ggplot2)\n\nx &lt;- runif(5, min = 1, max = 10)\nfruits &lt;- c(\"Apples\", \"Bananas\", \"Oranges\", \"Grapes\", \"Pears\")\n\nfruit_data &lt;- data.frame(fruit = fruits, quantity = x)\n\nggplot(fruit_data, aes(x = fruit, y = quantity)) + \n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  labs(x = \"Fruit\", y = \"Quantity\", title = \"Amount of Fruit\")\n\n\n\n\n\n\n\n\n\nIn MATLAB creating the same plot would take quite a few extra lines of code for sure.\n\n\nHere‚Äôs an example bar plot in python using plt.bar:\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Generate random data\nnp.random.seed(0)\nx = np.random.uniform(1, 10, 5)\nfruits = [\"Apples\", \"Bananas\", \"Oranges\", \"Grapes\", \"Pears\"]\n\n# Create a DataFrame\nfruit_data = pd.DataFrame({\"fruit\": fruits, \"quantity\": x})\n\n# Create the bar plot\nplt.bar(fruit_data['fruit'], fruit_data['quantity'], color='skyblue')\nplt.xlabel('Fruit')\nplt.ylabel('Quantity')\nplt.title('Amount of Fruit')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nScatter plots\nHere‚Äôs some examples of scatter plots using python:\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nnp.random.seed(0)\nx = np.random.uniform(1, 10, 5)\nfruits = [\"Apples\", \"Bananas\", \"Oranges\", \"Grapes\", \"Pears\"]\n\n# Create scatter plot\nplt.figure(figsize=(8, 5))\nplt.scatter(fruits, x, color='skyblue', s=100, edgecolor='black', alpha=0.7)\n\n# Add labels and title\nplt.xlabel('Fruit')\nplt.ylabel('Quantity')\nplt.title('Amount of Fruit')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n([0, 1, 2, 3, 4], [Text(0, 0, 'Apples'), Text(1, 0, 'Bananas'), Text(2, 0, 'Oranges'), Text(3, 0, 'Grapes'), Text(4, 0, 'Pears')])\n\n# Display the plot\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nHere‚Äôs a scatter plot in python showing the line of best fit by just plotting y = mx + b:\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate random data\nnp.random.seed(0)\nx = np.random.rand(20)\ny = np.random.rand(20)\n\n# Calculate the line of best fit\nm, b = np.polyfit(x, y, 1)\n\n# Calculate correlation\ncorrelation = np.corrcoef(x, y)[0, 1]\n\n# Create scatter plot\nplt.figure(figsize=(8, 5))\nplt.scatter(x, y, color='skyblue', label='Data Points')\n\n# Plot the line of best fit\nplt.plot(x, m*x + b, color='red', label='Line of Best Fit')\n\n# Add labels and title\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Scatter Plot with Line of Best Fit')\n\n# Add legend\nplt.legend()\n\n# Calculate and print correlation\nprint('Correlation coefficient:', correlation)\n\nCorrelation coefficient: 0.37157153754458777\n\n# Display the plot\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nHere‚Äôs the exact same scatter plots but in R instead using geom_point:\n\nlibrary(ggplot2)\n\n# Sample data\nset.seed(0)\nx &lt;- runif(5, min = 1, max = 10)\nfruits &lt;- c(\"Apples\", \"Bananas\", \"Oranges\", \"Grapes\", \"Pears\")\n\n# Create data frame\nfruit_data &lt;- data.frame(fruit = fruits, quantity = x)\n\n# Create scatter plot\nscatter_plot &lt;- ggplot(fruit_data, aes(x = fruit, y = quantity)) +\n  geom_point(color = \"skyblue\", size = 5, shape = 19, alpha = 0.7) +\n  labs(x = \"Fruit\", y = \"Quantity\", title = \"Amount of Fruit\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels\n\n# Display the plot\nprint(scatter_plot)\n\n\n\n\n\n\n\n\nHere‚Äôs a scatter plot in R using geom_smooth to fit a line of best fit:\n\n# Load libraries\nlibrary(ggplot2)\n\n# Set seed for reproducibility\nset.seed(0)\n\n# Generate random data\nx &lt;- runif(20)\ny &lt;- runif(20)\n\n# Create data frame\ndata &lt;- data.frame(x = x, y = y)\n\n# Create scatter plot\nscatter_plot &lt;- ggplot(data, aes(x = x, y = y)) +\n  geom_point(color = \"skyblue\") +\n  labs(x = \"X\", y = \"Y\", title = \"Scatter Plot with Line of Best Fit\")\n\n# Add line of best fit\nscatter_plot &lt;- scatter_plot + geom_smooth(method = \"lm\", se = FALSE, color = \"red\")\n\n# Calculate correlation coefficient\ncorrelation &lt;- cor(x, y)\n\n# Print correlation coefficient\ncat(\"Correlation coefficient:\", correlation, \"\\n\")\n\nCorrelation coefficient: -0.1527954 \n\n# Display plot\nprint(scatter_plot)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nThis is all there is to it. So the main trick here is to get the data in a format that can be read correctly. The sure fire way is to make sure the data provided to the plots is as a type array. But of course its possible to to index for example a pandas dataframe as an array.\n\n\nwhat about error bars?\nError bars a crucial in any plot and really tell the more about what the plot means. In any scientific work no error bars is just a no go.\nHere I show a scatter plot in R with shading using geom_smooth just by setting se = TRUE:\n\n# Load library\nlibrary(ggplot2)\n\n# Set seed for reproducibility\nset.seed(0)\n\n# Generate random data\nx &lt;- runif(20)\ny &lt;- runif(20)\n\n# Create data frame\ndata &lt;- data.frame(x = x, y = y)\n\n# Calculate standard deviation of y\nstd_dev_y &lt;- sd(y)\n\n# Create scatter plot\nscatter_plot &lt;- ggplot(data, aes(x = x, y = y)) +\n  geom_point(color = \"skyblue\") +\n  labs(x = \"X\", y = \"Y\", title = \"Scatter Plot with Line of Best Fit\")\n\n# Add line of best fit with shading for standard deviation\nscatter_plot &lt;- scatter_plot + \n  geom_smooth(method = \"lm\", se = TRUE, fill = \"skyblue\", color = \"red\") +\n  annotate(\"text\", x = max(data$x), y = max(data$y), \n           label = paste(\"Standard Deviation of Y:\", round(std_dev_y, 2)), \n           hjust = 1, vjust = 1)\n\n# Calculate correlation coefficient\ncorrelation &lt;- cor(x, y)\n\n# Print correlation coefficient\ncat(\"Correlation coefficient:\", correlation, \"\\n\")\n\nCorrelation coefficient: -0.1527954 \n\n# Display plot\nprint(scatter_plot)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nAnd here‚Äôs a bar plot in python with error bars by setting yerr:\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nfruits = [\"Apples\", \"Bananas\", \"Oranges\", \"Grapes\", \"Pears\"]\nquantities = np.random.randint(5, 20, size=5)\nerrors = np.random.randint(5,10,size=5) / 2\n\n# Create the bar plot\nplt.bar(fruits, quantities, color='skyblue', yerr=np.abs(errors), capsize=5)\n\n# Add labels and title\nplt.xlabel('Fruit')\nplt.ylabel('Quantity')\nplt.title('Amount of Fruit with Error Bars')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n([0, 1, 2, 3, 4], [Text(0, 0, 'Apples'), Text(1, 0, 'Bananas'), Text(2, 0, 'Oranges'), Text(3, 0, 'Grapes'), Text(4, 0, 'Pears')])\n\n# Display the plot\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\nPlotting is easy\nI hope the examples above convinced you that plotting in R or python is very easy. Not to mention that the plots look visually better without much tinkering (unlike in MATLAB). These are just some examples and I have made these isolated on purpose such that you can really just copy any block and alter it to your needs."
  },
  {
    "objectID": "posts/2024-03-08/index.html",
    "href": "posts/2024-03-08/index.html",
    "title": "What‚Äôs the best notebook",
    "section": "",
    "text": "What are quarto documents and jupyter notebooks?\nQuarto documents are a way to preview raw html of jupyter notebooks. But so much more.\nJupyter notebooks (I used for quite some time) are a way to have in-line code, split into cells that can be rendered one cell at a time. Typically jupyter notebooks are used with python and some text written in markdown. Despite this I find jupyter notebooks and its sister program jupyter labs to be great if you want to get started and learn python. Beyond this, jupyter lab offers a useful gui that aids almost any data scientist (or anyone who wishes to write python code for that matter) to process data in a more interactive way than just writing python code in the terminal. For example:\n\n\n\n\n\nHere I show my first (slightly laughable) attempt at importing matplotlib. Of course, on my windows machine I didn‚Äôt have it. So I thought this was a great example of how terminal based coding really goes like.\nThere is not much to see only really the raw code entered line-by-line. Whereas in a jupyter notebook that line plot can be created much more easily, with in-built syntax highlighting and code suggestions, it means that your less likely to find yourself in a situation as I found myself in above. (where you really don‚Äôt have a library or package installed before trying to import it!)\n\n\n\n\n\nHere above I show that those 6 or so lines can be executed in a ‚Äòcell‚Äô whereby the whole block of code can be run instead of typing the code line by line.\nThe above is great and it just works. I‚Äôm not going to bash jupyter lab or jupyter notebooks, you can find many videos online of people doing that; it‚Äôs also true and likely that I will still use them.\nBut I feel I have a workflow that works better and works well especially for me. If you‚Äôre like me and want to customise a coding editor to make it what your use case is, then keep reading.\n\n\nNeovim and the configuration\nPerhaps I started this whole rabbit-hole journey around 4th October 2023 with the first commit: 97ca162 But since then my whole configuration has altered and changed many times and in that process I have moved away from jupyter notebooks to quarto documents. Quarto documents I found much much easier to be able to do inline coding of any language by just specifying the tag I need ‚ÄòR‚Äô,‚Äòpython‚Äô,‚Äòbash‚Äô,‚Äòhtml‚Äô. I have also moved away from editing quarto documents in Rstudio and now solely edit files using neovim which looks like this:\n\nMy configuration allows for multiple things. So now everything I do, I do in neovim.\nSo why I chose quarto over jupyter notebooks, probably isn‚Äôt too clear at this point. However, the neovim configuration I have set up allows for all the things that can be offered from all text editors like vscode, Rstudio, jupyter notebooks but without a gui getting in the way and full customisability. There truly are a myriad of benefits (the biggest one is the keybindings, movements and gestures that let you edit and write code very fast) and I wish anyone who would like something that they can call their ‚Äúown‚Äù to go and explore neovim.\nAlthough the customisability took several months (this is probably the only downside, it is a lot of tinkering), I feel it is worth it and along the way, all this tinkering has helped me to begin to learn more about coding languages such as lua, python and JavaScript and shell scripting languages.\n\n\nThe purpose of this blog\nThe purpose of this blog is to really document these things. The things that have led me to the point I‚Äôm at right now. To start to write down coding notes about this particular configuration journey and beyond.\nI‚Äôd also like to dabble a bit of coding regarding data analysis in R and Python and to the mix too. And also to document data analysis of fMRI data. I think this would be the perfect place to do this.\n\n\nSuggestions?\nIf you have any suggestions how I can make this useful to you or would like to reach out to me please feel free to do so. I hope this blog will inform others‚Äô, if at least inform myself üòÇ."
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "Adam Coates",
    "section": "",
    "text": "Protected Page\n    \n    \n\n\n    \n        \n            \n                Loading...\n            \n            \n                \n                    \n                \n                This page is password protected.\n            \n            \n                \n                \n            \n        \n    \n    "
  }
]