[
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Recent Blog Posts",
    "section": "",
    "text": "simple plotting in r and python\n\n\n\nR\n\n\npython\n\n\n\nI show simple basic plotting methods using ggplot2 and matplotlib\n\n\n\n\n\n\nMar 12, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEasy way to make a gif\n\n\n\ntools\n\n\nwindows\n\n\ncross-platform\n\n\n\nA screen recorder-y way to make gifs on the screen\n\n\n\n\n\n\nMar 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe script that makes the website\n\n\n\nbash\n\n\n\nHere I‚Äôll write about the script that I‚Äôve written to make posting to this blog easier\n\n\n\n\n\n\nMar 10, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat‚Äôs the best notebook\n\n\n\ncoding\n\n\nneovim\n\n\nquarto\n\n\n\nand why I started this blog?\n\n\n\n\n\n\nMar 9, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2024-03-11/index.html",
    "href": "posts/2024-03-11/index.html",
    "title": "Easy way to make a gif",
    "section": "",
    "text": "Gifs are handy\n\nGifs or jifs (however you pronounce it)\n\nare very handy because they‚Äôre essentially mini videos and can be useful to explain or depict anything you‚Äôd like them to.\nFor example, the gif in the previous blog was used to show what the ‚Äòspinner‚Äô I made looks like in bash e.g: \nWithout the gif it perhaps wouldn‚Äôt be so obvious what I really meant by this spinner. And the code didn‚Äôt really give too much of an indication of what the spinner looked like.\nTake this other example.\n\nShowing slice-by-slice in the axial view of the brain, one can see the diverse changes in grey and white matter.\n\nNow you might say that okay you can depict this using images and thats true you can (and of course in an fMRI article you should definitely not use a gif but images). A gif on the other hand can just be a bit more visually appealing. (For this blog I‚Äôm kinda aiming for some visual appeal, no matter how cheesy it looks).\n\n\n\n\nmy brain\n\n\n\n\n\nHow to easily create a gif of anything you see on the screen.\nRecently I came across this tool that allows you to capture anything visible on your screen and turn it into a gif and I‚Äôm ashamed I never knew something like this existed.\nThe great thing about this is that it avoids opening a tool like obs to create a video of the screen, then using FFmpeg to convert the .mp4 to .gif.\nAll this used to take quite a bit of time before. Whereas now I can create a gif, in as much time as it takes for the program to load and for me to click record.\n\n\nWhats this tool\nThe tool is open source at GitHub ScreenToGif\nThe only downside of it, as far as I can tell it is only available for windows (so far). But it seems that the maintainer of the project wants to port this to MacOS and Linux.\nHere‚Äôs how it looks like\n\nAnd here‚Äôs the output from above (its in black and white here because the editor allows you to export without colours to save render times and storage)\n\n\n\nWindows‚Äôs fun .NET assembly\nAs far as I can tell Windows .NET assembly really lacks compatibility. I think linux‚Äôs OS is slowly becoming more attractive with greater extensibility. In the future I would aim to drop my windows machine entirely in favour for linux. But for now windows still just works and the GUI of windows 10 will always be ‚Äòenough for my productivity‚Äô.\nAs is often the case, you come across a great tool that works splendid in one OS but it doesn‚Äôt exist in another. I hope that with time there will be greater projects that aim at bridging the gap between cross platformability so that programs like this can be easily ported to other OS‚Äôs.\nHere‚Äôs just one example of a tool that does cross platform development in all OS‚Äôs Avolonia so it seems we are getting there slowly."
  },
  {
    "objectID": "posts/2024-03-08/index.html",
    "href": "posts/2024-03-08/index.html",
    "title": "What‚Äôs the best notebook",
    "section": "",
    "text": "What are quarto documents and jupyter notebooks?\nQuarto documents are a way to preview raw html of jupyter notebooks. But so much more.\nJupyter notebooks (I used for quite some time) are a way to have in-line code, split into cells that can be rendered one cell at a time. Typically jupyter notebooks are used with python and some text written in markdown. Despite this I find jupyter notebooks and its sister program jupyter labs to be great if you want to get started and learn python. Beyond this, jupyter lab offers a useful gui that aids almost any data scientist (or anyone who wishes to write python code for that matter) to process data in a more interactive way than just writing python code in the terminal. For example:\n\n\n\n\n\nHere I show my first (slightly laughable) attempt at importing matplotlib. Of course, on my windows machine I didn‚Äôt have it. So I thought this was a great example of how terminal based coding really goes like.\nThere is not much to see only really the raw code entered line-by-line. Whereas in a jupyter notebook that line plot can be created much more easily, with in-built syntax highlighting and code suggestions, it means that your less likely to find yourself in a situation as I found myself in above. (where you really don‚Äôt have a library or package installed before trying to import it!)\n\n\n\n\n\nHere above I show that those 6 or so lines can be executed in a ‚Äòcell‚Äô whereby the whole block of code can be run instead of typing the code line by line.\nThe above is great and it just works. I‚Äôm not going to bash jupyter lab or jupyter notebooks, you can find many videos online of people doing that; it‚Äôs also true and likely that I will still use them.\nBut I feel I have a workflow that works better and works well especially for me. If you‚Äôre like me and want to customise a coding editor to make it what your use case is, then keep reading.\n\n\nNeovim and the configuration\nPerhaps I started this whole rabbit-hole journey around 4th October 2023 with the first commit: 97ca162 But since then my whole configuration has altered and changed many times and in that process I have moved away from jupyter notebooks to quarto documents. Quarto documents I found much much easier to be able to do inline coding of any language by just specifying the tag I need ‚ÄòR‚Äô,‚Äòpython‚Äô,‚Äòbash‚Äô,‚Äòhtml‚Äô. I have also moved away from editing quarto documents in Rstudio and now solely edit files using neovim which looks like this:\n\nMy configuration allows for multiple things. So now everything I do, I do in neovim.\nSo why I chose quarto over jupyter notebooks, probably isn‚Äôt too clear at this point. However, the neovim configuration I have set up allows for all the things that can be offered from all text editors like vscode, Rstudio, jupyter notebooks but without a gui getting in the way and full customisability. There truly are a myriad of benefits (the biggest one is the keybindings, movements and gestures that let you edit and write code very fast) and I wish anyone who would like something that they can call their ‚Äúown‚Äù to go and explore neovim.\nAlthough the customisability took several months (this is probably the only downside, it is a lot of tinkering), I feel it is worth it and along the way, all this tinkering has helped me to begin to learn more about coding languages such as lua, python and JavaScript and shell scripting languages.\n\n\nThe purpose of this blog\nThe purpose of this blog is to really document these things. The things that have led me to the point I‚Äôm at right now. To start to write down coding notes about this particular configuration journey and beyond.\nI‚Äôd also like to dabble a bit of coding regarding data analysis in R and Python and to the mix too. And also to document data analysis of fMRI data. I think this would be the perfect place to do this.\n\n\nSuggestions?\nIf you have any suggestions how I can make this useful to you or would like to reach out to me please feel free to do so. I hope this blog will inform others‚Äô, if at least inform myself üòÇ."
  },
  {
    "objectID": "posts/2024-03-10/index.html",
    "href": "posts/2024-03-10/index.html",
    "title": "The script that makes the website",
    "section": "",
    "text": "Blogging is hard\nWithout helpful scripts writing a blog can be hard to do. There is a lot of things to remember!\n\nThe structure of a yaml header\nHow to save the document\nHow to properly render in-line code\nThe command needed to render the quarto markdown to html (its true, this blog is written using quarto)\nThe usual git commit and push commands (the website is all open source on github)\n‚Ä¶ and many other things I care not to remember\noh wait even remembering to write a blog post can be hard!\n\nSo, I‚Äôve made it easier for myself. I recently wrote a bash script that does everything I need to get started writing a blog post.\nThe whole blog is structured around quarto markdown format and so this alone makes life much easier to do.\n\n\nThe script\nLets start at the top of the script and work our way down. First I define 6 variables these are mainly colours (Yes I‚Äôm one of those people that like colour in the bash scriptüòÇ for me its easier to show yes (in green) and no (in red) that way it‚Äôs a subconscious thing. If I see something written in red I might be entering the danger zone).\nAlso here I create a variable to where the blog is stored locally and the GitHub address of where this repo is.\nFinally, at the bottom I made a function to get user input for:\n\nThe title of the blog\n\nThe description of the blog\n\n\n\ncode part 1\n\nrepo=\"https://github.com/adam-coates/adam-coates.github.io\"\nblogdir=~/adam-coates.github.io/posts\ngreen='\\e[32m'\nred='\\e[31m'\npurple='\\033[0;35m'\nclear='\\e[0m'\n\nColorGreen(){\n    echo -ne $green$1$clear\n}\n\nColorRed(){\n    echo -ne $red$1$clear\n}\n\nColorPurple(){\n    echo -ne $purple$1$clear\n}\n\nget_info() {\n    read -p \"Enter a title: \" title\n\n    read -p \"Enter a description: \" description\n}\n\n\nNext I created a function that I use often if I know a piece of code involves doing x for a certain amount of time without any output I like to have a visual ‚Äòspinner‚Äô output on the screen that shows me that a process is working.\nThis will be clear later on in the code.\nThis spinner works by getting the process ID otherwise known as PID of a process and outputs these characters ‚£æ,‚£Ω,‚£ª,‚¢ø,‚°ø,‚£ü,‚£Ø,‚£∑. The hardest part is actually how to display these characters to replace the character before it. Otherwise the bash output might look a bit something like this:\n\n\n\n\n\nSo after a character is printed out, there is a special unicode character that actually moves the cursor back one place on the screen (almost acting like a backspace). This deletes the current visible character and places the new one in its place.\n\n\ncode part 1.1\n\nfunction spinner() {\n    # Spinner characters\n    local spin='‚£æ‚£Ω‚£ª‚¢ø‚°ø‚£ü‚£Ø‚£∑'\n    local charwidth=3\n\n    # Make sure we use non-unicode character type locale \n    # (that way it works for any locale as long as the font supports the characters)\n    local LC_CTYPE=C\n\n    # Run the command passed as arguments and capture its PID\n    \"$@\" &\n    local pid=$!\n\n    local i=0\n    tput civis # Cursor invisible\n    while kill -0 $pid 2&gt;/dev/null; do\n        local i=$(((i + $charwidth) % ${#spin}))\n        printf \"\\e[32m%s\\e[m\" \"${spin:$i:$charwidth}\"  # Green font color\n        printf \"\\033[1D\"  # Move the cursor back one position\n        sleep .1\n    done\n    tput cnorm # Cursor visible\n    wait $pid # Capture exit code\n    return $?\n}\n\n\n\n\nQuarto template\nNext I created a function to actually generate a template of the quarto markdown document needed to write a blog post such as this one you‚Äôre reading right now.\nI start by getting helpful info. Todays date and date and time. I then make a new directory in the blog local directory and then create the ‚Äò.qmd‚Äô document called index.\nNext comes the boilerplate yaml header for every blog post. The title, description, (if I want github comments enabled at the bottom of the post), date, categories and any other additional .css that I might need.\nThere is a whole myriad of yaml header options that are described on the quarto website. But for a basic, get-going, blog the yaml below is all I need.\nFinally I open the newly made document, in my favourite text editor neovim.\n\n\ncode part 1.2\n\ncreate_file() {\n    date=$(date +\"%Y-%m-%d\")\n    timestamp=\"$(date +\"%Y-%m-%d-%H:%m\")\"\n    localdir=\"$blogdir/$date/\"\n    mkdir \"$localdir\"\n    # Cd into the directory\n    cd \"$localdir\" || exit\n    # Create the file in the specified directory\n    touch \"$localdir/index.qmd\"\n\n\n    # Format the title by removing dashes\n    title=\"${title//-/ }\"\n\n    # set up the yaml frontmatter\n    echo \"---\" &gt;&gt;\"$localdir/index.qmd\"\n    echo \"title: \\\"$title\\\"\" &gt;&gt;\"$localdir/index.qmd\"\n    echo \"description: \\\"$description\\\"\" &gt;&gt;\"$localdir/index.qmd\"\n    echo \"#image: \\\"preview.png\\\"\" &gt;&gt;\"$localdir/index.qmd\"\n    echo \"comments:\"&gt;&gt;\"$localdir/index.qmd\"\n    echo \"  giscus:\"&gt;&gt;\"$localdir/index.qmd\"\n    echo \"    repo: \\\"adam-coates/adam-coates.github.io\\\"\"&gt;&gt;\"$localdir/index.qmd\"\n    echo \"    mapping: \\\"title\\\"\"&gt;&gt;\"$localdir/index.qmd\"\n    echo \"date: \\\"$date\\\"\" &gt;&gt;\"$localdir/index.qmd\"\n    echo \"categories: []\"&gt;&gt;\"$localdir/index.qmd\"\n    echo \"draft: false #  setting this to `true` will prevent your post from appearing on your listing page until you're ready\" &gt;&gt;\"$localdir/index.qmd\"\n    echo \"#css: style.css\"&gt;&gt;\"$localdir/index.qmd\"\n    echo \"---\" &gt;&gt;\"$localdir/index.qmd\" \n\n\n    # Open the file in Neovim\n    nvim '+ normal 2GzzA' \"$localdir/index.qmd\"\n}\n\n\n\n\nChecking if a backup is needed\nI then create a function that checks if files stored locally are the same as files stored in my mounted backup drive. Here this function does two things.\n\nFirst check if a file that exists locally is or isn‚Äôt stored in my backup.\n\nIt breaks the loop here if thats the case since this is faster.\n\nIf all file metadata are the same in both the local dir and stored in my backup, then it checks if the number of bytes are the same.\n\nIt breaks the loop here if thats the case, since if the bytes differ then the files aren‚Äôt the same\n\nChecks the contents of the files. Its true that the bytes of two files may be identical but with differing content. The script uses the md5sum command to get the checksum of the files. If the content differs so will the check sum.\n\nThis will all be apparent later. But basically this function is used to backup only when local changes are made.\n\n\ncode part 1.3\n\nfunction check_directories {\n    dir1=\"$1\"\n    dir2=\"$2\"\n    differences_found=false\n\n    # Find all files in dir1\n    files=$(find \"$dir1\" -type f)\n\n    # Iterate over each file in dir1\n    for file in $files; do\n        # Get corresponding file path in dir2\n        file_in_dir2=\"${file/$dir1/$dir2}\"\n\n        # Check if the file exists in dir2\n        if [ ! -f \"$file_in_dir2\" ]; then\n            echo \"File $file_in_dir2 does not exist in $dir2\"\n            differences_found=true\n            continue\n        fi\n\n        # Use cmp command to check if files differ\n        if ! cmp -s \"$file\" \"$file_in_dir2\"; then\n            echo \"Files differ:\"\n            echo \"  $file\"\n            echo \"  $file_in_dir2\"\n\n            # Calculate the checksums of the files\n            checksum1=$(md5sum \"$file\" | awk '{ print $1 }')\n            checksum2=$(md5sum \"$file_in_dir2\" | awk '{ print $1 }')\n\n            # Compare the checksums\n            if [ \"$checksum1\" != \"$checksum2\" ]; then\n                echo \"File contents are different.\"\n                differences_found=true\n            fi\n        fi\n    done\n\n    if [ \"$differences_found\" = true ]; then\n        return 1\n    else\n        return 0\n    fi\n}\n\n\n\n\nBash is on the case $1 in write) esac\nNow lets move onto the case statement. Case statements are great in bash because they‚Äôre easy and let you do parse inputs to scripts with ease. Bash‚Äôs handy $1 built-in variable means the first argument passed to a script. So say I run a script called my_script.sh foobar the value stored in $1 will be foobar.\nSo when I run my script and the argument is ‚Äúwrite‚Äù. The script gets some info (title & description), makes the document and opens neovim.\nWhen I type the argument ‚Äúbackup‚Äù, the script immediately copies all contents of the blog to my mounted drive (regardless of checking for file differences)\nWhen I type ‚Äúpub‚Äù, the script pushes all changes to GitHub. It asks for input first what the commit message should be.\nWhen I type ‚Äúpreview‚Äù the script changes directory (cd‚Äôs) into the locally stored blog directory and runs the quarto preview command.\n\n\ncode part 2\n\ncase \"$1\" in \n    write)\n        get_info\n\n        create_file\n\n        ;;\n\n    backup)\n\n        echo -ne \"$(ColorRed 'Backing up now ... ')\"; echo \"\"\n        spinner cp -rf  ~/adam-coates.github.io/ /mnt/g/blog/\n        echo -ne \"$(ColorGreen 'Files now backed up \\u2714')\"; echo \"\"\n        ;;\n\n    pub)\n        read -p \"Enter a commit message: \" commitmessage\n        cd $blogdir/..\n        git add .\n        git commit -m \"$commitmessage\"\n        git push -u origin main\n\n        ;;\n\n    preview)\n        cd \"$blogdir/..\"\n        quarto preview\n\n        ;;\n\n    *)\n\n    echo \"Please enter either write|backup|pub|preview\"\n    ;;\n\nesac\n\n\n\n\nBacking up!\nFinally the script does a backup if I did not use ‚Äúbackup‚Äù as the first argument to the script. This is something I learnt the hard way. Always backup. Backup many times, to the cloud ‚òÅ, to a usb, to another hard drive. No matter how you do it back up üíæüíø. Its so important.\nSo in this script this section always runs!! It first asks the user if they would really want to back up. If the user says (YES, yes, Y or y) then it will proceed. First it does the handy file check to see if a backup is even needed. i.e if there is a difference between my mounted drive and locally stored files is found then it will backup else, nothing will happen.\nHere the visual spinner comes in handy since it helps show me that something really is happening and backing up. I like this and it puts me at ease (not to mention it looks kinda cool)\n\n\n\n\n\nAs I mentioned at the beginning I use colours and for this not backing up will always be in red. Since this really isn‚Äôt a good thing.\n\n\ncode part 3\n\nif [[ \"$1\" != \"backup\" ]]; then\necho -ne \"Would you like to back up? $(ColorGreen 'yes')/$(ColorRed 'no')\n\"\nread -r check\ncheck=$(echo \"$check\" | tr '[:upper:]' '[:lower:]')\nif [[ $check == \"yes\" || $check == \"y\" ]]; then\n    echo -ne \"$(ColorPurple 'Checking if needing to back up ')\"; spinner sleep 5; echo -ne \"$(ColorGreen '\\u2714')\"; echo \"\"\n    if ! check_directories $blogdir /mnt/g/blog/adam-coates.github.io/posts/; then\n        echo -ne \"$(ColorRed 'Different files detected backing up now ... ')\"; echo \"\"\n        spinner cp -rf  ~/adam-coates.github.io/ /mnt/g/blog/\n        echo -ne \"$(ColorGreen 'Files now backed up \\u2714')\"; echo \"\"\n    else\n        echo \"\"\n        echo -ne \"$(ColorGreen 'Files are already backed up \\u2714')\"; echo \"\"\n    fi\n    elif [[ $check == \"no\" || $check == \"n\" ]]; then\n    exit\nelse\n    echo \"Invalid choice. Please enter 'yes' or 'no'. Exiting now.\"\n fi\nfi\n\nAnd that‚Äôs about it. I‚Äôll put the full script available on GitHub and please feel free if you have questions to write them below, or on GitHub itself.\nScript available here"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Adam Coates",
    "section": "",
    "text": "About\n\nHello, I‚Äôm Adam a PhD student in Cognitive Psychology at the University of Graz, Austria.\n\n\n:::"
  },
  {
    "objectID": "posts/2024-03-12/index.html",
    "href": "posts/2024-03-12/index.html",
    "title": "simple plotting in r and python",
    "section": "",
    "text": "It‚Äôs time to move away from matlab entirely\nWhile MATLAB served me well for a number of years I feel now is the time to completely stop using it all together (except for exceptional use cases, for example Psychtoolbox, but even then I‚Äôm much more inclined to use the open source MATLAB version Octave).\nMATLAB themselves even write about the differences between MATLAB and Python and which one you should use. It‚Äôs true MATLAB‚Äôs documentation on functions and packages is really extensive, easily understandable and takes the lead over Python and R. But this is just because MATLAB is a private company and the subscriptions aren‚Äôt exactly cheap. For MATLAB they argue that you pay for more than just the GUI and software but also this user support (although I‚Äôve never ever picked up the phone and called MATLAB directly with a problem I‚Äôve had).\nStill Python has, in recent years, closed the gap between computational speed of large matrices and with an ever increasing user base, has gained a lot of very useful packages and modules.\nEven R is/ (arguably has) already closed this gap too. And with Rstudios nicely laid out default GUI there is really no excuse even for beginners not to use it.\nMATLAB will always be used in certain fields though because it really just works well, not to mention how easy it is to use (again though the extensive and well-documented functions are partly the reason for this).\nBut R and Python are open source and FREE! Anyone can use them.\n\n\nI want to make plots using in an open source way, how?\nThis blog post won‚Äôt give a full tutorial, just check out a YouTube video for that, theres really loads! Or even ask chatgpt to do it for you, since it seems to do well at basic coding anyway.\nWith a fully configured neovim setup (like the one I have) it makes coding easier and much faster to do. This is an additional reason to move away from MATLAB since you almost have to do everything inside of MATLABs gui.\n\n\nBar plots\nHere‚Äôs an example bar plot plot in R using ggplot:\n\nlibrary(ggplot2)\n\nx &lt;- runif(5, min = 1, max = 10)\nfruits &lt;- c(\"Apples\", \"Bananas\", \"Oranges\", \"Grapes\", \"Pears\")\n\nfruit_data &lt;- data.frame(fruit = fruits, quantity = x)\n\nggplot(fruit_data, aes(x = fruit, y = quantity)) + \n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  labs(x = \"Fruit\", y = \"Quantity\", title = \"Amount of Fruit\")\n\n\n\n\n\n\n\n\n\nIn MATLAB creating the same plot would take quite a few extra lines of code for sure.\n\n\nHere‚Äôs an example bar plot in python using plt.bar:\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Generate random data\nnp.random.seed(0)\nx = np.random.uniform(1, 10, 5)\nfruits = [\"Apples\", \"Bananas\", \"Oranges\", \"Grapes\", \"Pears\"]\n\n# Create a DataFrame\nfruit_data = pd.DataFrame({\"fruit\": fruits, \"quantity\": x})\n\n# Create the bar plot\nplt.bar(fruit_data['fruit'], fruit_data['quantity'], color='skyblue')\nplt.xlabel('Fruit')\nplt.ylabel('Quantity')\nplt.title('Amount of Fruit')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nScatter plots\nHere‚Äôs some examples of scatter plots using python:\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nnp.random.seed(0)\nx = np.random.uniform(1, 10, 5)\nfruits = [\"Apples\", \"Bananas\", \"Oranges\", \"Grapes\", \"Pears\"]\n\n# Create scatter plot\nplt.figure(figsize=(8, 5))\nplt.scatter(fruits, x, color='skyblue', s=100, edgecolor='black', alpha=0.7)\n\n# Add labels and title\nplt.xlabel('Fruit')\nplt.ylabel('Quantity')\nplt.title('Amount of Fruit')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n([0, 1, 2, 3, 4], [Text(0, 0, 'Apples'), Text(1, 0, 'Bananas'), Text(2, 0, 'Oranges'), Text(3, 0, 'Grapes'), Text(4, 0, 'Pears')])\n\n# Display the plot\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nHere‚Äôs a scatter plot in python showing the line of best fit by just plotting y = mx + b:\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate random data\nnp.random.seed(0)\nx = np.random.rand(20)\ny = np.random.rand(20)\n\n# Calculate the line of best fit\nm, b = np.polyfit(x, y, 1)\n\n# Calculate correlation\ncorrelation = np.corrcoef(x, y)[0, 1]\n\n# Create scatter plot\nplt.figure(figsize=(8, 5))\nplt.scatter(x, y, color='skyblue', label='Data Points')\n\n# Plot the line of best fit\nplt.plot(x, m*x + b, color='red', label='Line of Best Fit')\n\n# Add labels and title\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Scatter Plot with Line of Best Fit')\n\n# Add legend\nplt.legend()\n\n# Calculate and print correlation\nprint('Correlation coefficient:', correlation)\n\nCorrelation coefficient: 0.37157153754458777\n\n# Display the plot\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nHere‚Äôs the exact same scatter plots but in R instead using geom_point:\n\nlibrary(ggplot2)\n\n# Sample data\nset.seed(0)\nx &lt;- runif(5, min = 1, max = 10)\nfruits &lt;- c(\"Apples\", \"Bananas\", \"Oranges\", \"Grapes\", \"Pears\")\n\n# Create data frame\nfruit_data &lt;- data.frame(fruit = fruits, quantity = x)\n\n# Create scatter plot\nscatter_plot &lt;- ggplot(fruit_data, aes(x = fruit, y = quantity)) +\n  geom_point(color = \"skyblue\", size = 5, shape = 19, alpha = 0.7) +\n  labs(x = \"Fruit\", y = \"Quantity\", title = \"Amount of Fruit\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels\n\n# Display the plot\nprint(scatter_plot)\n\n\n\n\n\n\n\n\nHere‚Äôs a scatter plot in R using geom_smooth to fit a line of best fit:\n\n# Load libraries\nlibrary(ggplot2)\n\n# Set seed for reproducibility\nset.seed(0)\n\n# Generate random data\nx &lt;- runif(20)\ny &lt;- runif(20)\n\n# Create data frame\ndata &lt;- data.frame(x = x, y = y)\n\n# Create scatter plot\nscatter_plot &lt;- ggplot(data, aes(x = x, y = y)) +\n  geom_point(color = \"skyblue\") +\n  labs(x = \"X\", y = \"Y\", title = \"Scatter Plot with Line of Best Fit\")\n\n# Add line of best fit\nscatter_plot &lt;- scatter_plot + geom_smooth(method = \"lm\", se = FALSE, color = \"red\")\n\n# Calculate correlation coefficient\ncorrelation &lt;- cor(x, y)\n\n# Print correlation coefficient\ncat(\"Correlation coefficient:\", correlation, \"\\n\")\n\nCorrelation coefficient: -0.1527954 \n\n# Display plot\nprint(scatter_plot)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nThis is all there is to it. So the main trick here is to get the data in a format that can be read correctly. The sure fire way is to make sure the data provided to the plots is as a type array. But of course its possible to to index for example a pandas dataframe as an array.\n\n\nwhat about error bars?\nError bars a crucial in any plot and really tell the more about what the plot means. In any scientific work no error bars is just a no go.\nHere I show a scatter plot in R with shading using geom_smooth just by setting se = TRUE:\n\n# Load library\nlibrary(ggplot2)\n\n# Set seed for reproducibility\nset.seed(0)\n\n# Generate random data\nx &lt;- runif(20)\ny &lt;- runif(20)\n\n# Create data frame\ndata &lt;- data.frame(x = x, y = y)\n\n# Calculate standard deviation of y\nstd_dev_y &lt;- sd(y)\n\n# Create scatter plot\nscatter_plot &lt;- ggplot(data, aes(x = x, y = y)) +\n  geom_point(color = \"skyblue\") +\n  labs(x = \"X\", y = \"Y\", title = \"Scatter Plot with Line of Best Fit\")\n\n# Add line of best fit with shading for standard deviation\nscatter_plot &lt;- scatter_plot + \n  geom_smooth(method = \"lm\", se = TRUE, fill = \"skyblue\", color = \"red\") +\n  annotate(\"text\", x = max(data$x), y = max(data$y), \n           label = paste(\"Standard Deviation of Y:\", round(std_dev_y, 2)), \n           hjust = 1, vjust = 1)\n\n# Calculate correlation coefficient\ncorrelation &lt;- cor(x, y)\n\n# Print correlation coefficient\ncat(\"Correlation coefficient:\", correlation, \"\\n\")\n\nCorrelation coefficient: -0.1527954 \n\n# Display plot\nprint(scatter_plot)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nAnd here‚Äôs a bar plot in python with error bars by setting yerr:\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nfruits = [\"Apples\", \"Bananas\", \"Oranges\", \"Grapes\", \"Pears\"]\nquantities = np.random.randint(5, 20, size=5)\nerrors = np.random.randint(5,10,size=5) / 2\n\n# Create the bar plot\nplt.bar(fruits, quantities, color='skyblue', yerr=np.abs(errors), capsize=5)\n\n# Add labels and title\nplt.xlabel('Fruit')\nplt.ylabel('Quantity')\nplt.title('Amount of Fruit with Error Bars')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n([0, 1, 2, 3, 4], [Text(0, 0, 'Apples'), Text(1, 0, 'Bananas'), Text(2, 0, 'Oranges'), Text(3, 0, 'Grapes'), Text(4, 0, 'Pears')])\n\n# Display the plot\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\nPlotting is easy\nI hope the examples above convinced you that plotting in R or python is very easy. Not to mention that the plots look visually better without much tinkering (unlike in MATLAB). These are just some examples and I have made these isolated on purpose such that you can really just copy any block and alter it to your needs."
  }
]